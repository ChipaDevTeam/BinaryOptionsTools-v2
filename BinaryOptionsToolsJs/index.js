/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */

const { existsSync, readFileSync } = require('fs')
const { join } = require('path')

const { platform, arch } = process

let nativeBinding = null
let localFileExisted = false
let loadError = null

function isMusl() {
  // For Node 10
  if (!process.report || typeof process.report.getReport !== 'function') {
    try {
      const lddPath = require('child_process').execSync('which ldd').toString().trim()
      return readFileSync(lddPath, 'utf8').includes('musl')
    } catch (e) {
      return true
    }
  } else {
    const { glibcVersionRuntime } = process.report.getReport().header
    return !glibcVersionRuntime
  }
}

switch (platform) {
  case 'android':
    switch (arch) {
      case 'arm64':
        localFileExisted = existsSync(join(__dirname, 'binary-options-tools.android-arm64.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./binary-options-tools.android-arm64.node')
          } else {
            nativeBinding = require('@rick-29/binary-options-tools-android-arm64')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm':
        localFileExisted = existsSync(join(__dirname, 'binary-options-tools.android-arm-eabi.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./binary-options-tools.android-arm-eabi.node')
          } else {
            nativeBinding = require('@rick-29/binary-options-tools-android-arm-eabi')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on Android ${arch}`)
    }
    break
  case 'win32':
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(
          join(__dirname, 'binary-options-tools.win32-x64-msvc.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./binary-options-tools.win32-x64-msvc.node')
          } else {
            nativeBinding = require('@rick-29/binary-options-tools-win32-x64-msvc')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'ia32':
        localFileExisted = existsSync(
          join(__dirname, 'binary-options-tools.win32-ia32-msvc.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./binary-options-tools.win32-ia32-msvc.node')
          } else {
            nativeBinding = require('@rick-29/binary-options-tools-win32-ia32-msvc')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm64':
        localFileExisted = existsSync(
          join(__dirname, 'binary-options-tools.win32-arm64-msvc.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./binary-options-tools.win32-arm64-msvc.node')
          } else {
            nativeBinding = require('@rick-29/binary-options-tools-win32-arm64-msvc')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on Windows: ${arch}`)
    }
    break
  case 'darwin':
    localFileExisted = existsSync(join(__dirname, 'binary-options-tools.darwin-universal.node'))
    try {
      if (localFileExisted) {
        nativeBinding = require('./binary-options-tools.darwin-universal.node')
      } else {
        nativeBinding = require('@rick-29/binary-options-tools-darwin-universal')
      }
      break
    } catch {}
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(join(__dirname, 'binary-options-tools.darwin-x64.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./binary-options-tools.darwin-x64.node')
          } else {
            nativeBinding = require('@rick-29/binary-options-tools-darwin-x64')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm64':
        localFileExisted = existsSync(
          join(__dirname, 'binary-options-tools.darwin-arm64.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./binary-options-tools.darwin-arm64.node')
          } else {
            nativeBinding = require('@rick-29/binary-options-tools-darwin-arm64')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on macOS: ${arch}`)
    }
    break
  case 'freebsd':
    if (arch !== 'x64') {
      throw new Error(`Unsupported architecture on FreeBSD: ${arch}`)
    }
    localFileExisted = existsSync(join(__dirname, 'binary-options-tools.freebsd-x64.node'))
    try {
      if (localFileExisted) {
        nativeBinding = require('./binary-options-tools.freebsd-x64.node')
      } else {
        nativeBinding = require('@rick-29/binary-options-tools-freebsd-x64')
      }
    } catch (e) {
      loadError = e
    }
    break
  case 'linux':
    switch (arch) {
      case 'x64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'binary-options-tools.linux-x64-musl.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./binary-options-tools.linux-x64-musl.node')
            } else {
              nativeBinding = require('@rick-29/binary-options-tools-linux-x64-musl')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'binary-options-tools.linux-x64-gnu.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./binary-options-tools.linux-x64-gnu.node')
            } else {
              nativeBinding = require('@rick-29/binary-options-tools-linux-x64-gnu')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 'arm64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'binary-options-tools.linux-arm64-musl.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./binary-options-tools.linux-arm64-musl.node')
            } else {
              nativeBinding = require('@rick-29/binary-options-tools-linux-arm64-musl')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'binary-options-tools.linux-arm64-gnu.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./binary-options-tools.linux-arm64-gnu.node')
            } else {
              nativeBinding = require('@rick-29/binary-options-tools-linux-arm64-gnu')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 'arm':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'binary-options-tools.linux-arm-musleabihf.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./binary-options-tools.linux-arm-musleabihf.node')
            } else {
              nativeBinding = require('@rick-29/binary-options-tools-linux-arm-musleabihf')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'binary-options-tools.linux-arm-gnueabihf.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./binary-options-tools.linux-arm-gnueabihf.node')
            } else {
              nativeBinding = require('@rick-29/binary-options-tools-linux-arm-gnueabihf')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 'riscv64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'binary-options-tools.linux-riscv64-musl.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./binary-options-tools.linux-riscv64-musl.node')
            } else {
              nativeBinding = require('@rick-29/binary-options-tools-linux-riscv64-musl')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'binary-options-tools.linux-riscv64-gnu.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./binary-options-tools.linux-riscv64-gnu.node')
            } else {
              nativeBinding = require('@rick-29/binary-options-tools-linux-riscv64-gnu')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 's390x':
        localFileExisted = existsSync(
          join(__dirname, 'binary-options-tools.linux-s390x-gnu.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./binary-options-tools.linux-s390x-gnu.node')
          } else {
            nativeBinding = require('@rick-29/binary-options-tools-linux-s390x-gnu')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on Linux: ${arch}`)
    }
    break
  default:
    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`)
}

if (!nativeBinding) {
  if (loadError) {
    // Enhanced error message for better debugging
    const platformId = `${platform}-${arch}`
    const expectedPackage = `@rick-29/binary-options-tools-${platformId === 'win32-x64' ? 'win32-x64-msvc' : 
                                                               platformId === 'win32-ia32' ? 'win32-ia32-msvc' :
                                                               platformId === 'win32-arm64' ? 'win32-arm64-msvc' :
                                                               platformId === 'darwin-x64' ? 'darwin-x64' :
                                                               platformId === 'darwin-arm64' ? 'darwin-arm64' :
                                                               platformId === 'linux-x64' ? 'linux-x64-gnu' :
                                                               platformId === 'linux-arm64' ? 'linux-arm64-gnu' :
                                                               platformId}`
    
    const helpfulError = new Error(
      `Failed to load native binary for ${platform}-${arch}.\n\n` +
      `This package requires native binaries to be built for your platform.\n` +
      `The following was attempted:\n` +
      `1. Local binary file (not found)\n` +
      `2. Platform package: ${expectedPackage} (failed)\n\n` +
      `To fix this issue:\n` +
      `1. Make sure you have the latest version of this package\n` +
      `2. Try rebuilding: npm run build\n` +
      `3. Check if your platform is supported\n\n` +
      `Original error: ${loadError.message}`
    )
    helpfulError.code = loadError.code
    helpfulError.platform = platform
    helpfulError.arch = arch
    helpfulError.originalError = loadError
    throw helpfulError
  }
  throw new Error(`Failed to load native binding for ${platform}-${arch}`)
}

const { StreamIterator, RawStreamIterator, PocketOption, Validator, startTracing, StreamLogsLayer, StreamLogsIterator, LogBuilder, Logger } = nativeBinding

module.exports.StreamIterator = StreamIterator
module.exports.RawStreamIterator = RawStreamIterator
module.exports.PocketOption = PocketOption
module.exports.Validator = Validator
module.exports.startTracing = startTracing
module.exports.StreamLogsLayer = StreamLogsLayer
module.exports.StreamLogsIterator = StreamLogsIterator
module.exports.LogBuilder = LogBuilder
module.exports.Logger = Logger
