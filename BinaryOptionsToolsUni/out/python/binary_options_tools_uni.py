

# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

from __future__ import annotations
import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import threading
import itertools
import traceback
import typing
import asyncio
import platform

# Used for default argument values
_DEFAULT = object() # type: typing.Any


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_uint64),
        ("len", ctypes.c_uint64),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def default():
        return _UniffiRustBuffer(0, 0, None)

    @staticmethod
    def alloc(size):
        return _uniffi_rust_call(_UniffiLib.ffi_binary_options_tools_uni_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _uniffi_rust_call(_UniffiLib.ffi_binary_options_tools_uni_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _uniffi_rust_call(_UniffiLib.ffi_binary_options_tools_uni_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_UNEXPECTED_ERROR = 2

    @staticmethod
    def default():
        return _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer.default())

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
            return "_UniffiRustCallStatus(CALL_UNEXPECTED_ERROR)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _uniffi_rust_call(fn, *args):
    # Call a rust function
    return _uniffi_rust_call_with_error(None, fn, *args)

def _uniffi_rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus.default()

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_uniffi_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

def _uniffi_trait_interface_call(call_status, make_call, write_return_value):
    try:
        return write_return_value(make_call())
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))

def _uniffi_trait_interface_call_with_error(call_status, make_call, write_return_value, error_type, lower_error):
    try:
        try:
            return write_return_value(make_call())
        except error_type as e:
            call_status.code = _UniffiRustCallStatus.CALL_ERROR
            call_status.error_buf = lower_error(e)
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))
class _UniffiHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._map = {}  # type: Dict[Handle, Any]
        self._lock = threading.Lock()
        self._counter = itertools.count()

    def insert(self, obj):
        with self._lock:
            handle = next(self._counter)
            self._map[handle] = obj
            return handle

    def get(self, handle):
        try:
            with self._lock:
                return self._map[handle]
        except KeyError:
            raise InternalError("_UniffiHandleMap.get: Invalid handle")

    def remove(self, handle):
        try:
            with self._lock:
                return self._map.pop(handle)
        except KeyError:
            raise InternalError("_UniffiHandleMap.remove: Invalid handle")

    def __len__(self):
        return len(self._map)
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_uint64, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("binary_options_tools_uni")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 29
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_binary_options_tools_uni_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_assets() != 48493:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_balance() != 26020:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_buy() != 63032:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_clear_closed_deals() != 9178:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_get_candles() != 23490:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_get_candles_advanced() != 27509:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_get_closed_deals() != 47785:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_get_opened_deals() != 27985:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_history() != 27093:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_is_demo() != 19411:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_reconnect() != 9220:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_result() != 594:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_result_with_timeout() != 56468:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_sell() != 61157:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_server_time() != 10589:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_shutdown() != 51452:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_subscribe() != 23382:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_trade() != 14619:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_unsubscribe() != 29837:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_binary_options_tools_uni_checksum_method_subscriptionstream_next() != 13448:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_binary_options_tools_uni_checksum_constructor_pocketoption_new() != 31315:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_binary_options_tools_uni_checksum_constructor_pocketoption_new_with_url() != 40992:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_int8,
)
_UNIFFI_FOREIGN_FUTURE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
_UNIFFI_CALLBACK_INTERFACE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
class _UniffiForeignFuture(ctypes.Structure):
    _fields_ = [
        ("handle", ctypes.c_uint64),
        ("free", _UNIFFI_FOREIGN_FUTURE_FREE),
    ]
class _UniffiForeignFutureStructU8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU8,
)
class _UniffiForeignFutureStructI8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI8,
)
class _UniffiForeignFutureStructU16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU16,
)
class _UniffiForeignFutureStructI16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI16,
)
class _UniffiForeignFutureStructU32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU32,
)
class _UniffiForeignFutureStructI32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI32,
)
class _UniffiForeignFutureStructU64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU64,
)
class _UniffiForeignFutureStructI64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI64,
)
class _UniffiForeignFutureStructF32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_float),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF32,
)
class _UniffiForeignFutureStructF64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_double),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF64,
)
class _UniffiForeignFutureStructPointer(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_void_p),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_POINTER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructPointer,
)
class _UniffiForeignFutureStructRustBuffer(ctypes.Structure):
    _fields_ = [
        ("return_value", _UniffiRustBuffer),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_RUST_BUFFER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructRustBuffer,
)
class _UniffiForeignFutureStructVoid(ctypes.Structure):
    _fields_ = [
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructVoid,
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_clone_pocketoption.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_clone_pocketoption.restype = ctypes.c_void_p
_UniffiLib.uniffi_binary_options_tools_uni_fn_free_pocketoption.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_free_pocketoption.restype = None
_UniffiLib.uniffi_binary_options_tools_uni_fn_constructor_pocketoption_new.argtypes = (
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_constructor_pocketoption_new.restype = ctypes.c_uint64
_UniffiLib.uniffi_binary_options_tools_uni_fn_constructor_pocketoption_new_with_url.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_constructor_pocketoption_new_with_url.restype = ctypes.c_uint64
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_assets.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_assets.restype = ctypes.c_uint64
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_balance.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_balance.restype = ctypes.c_uint64
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_buy.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_uint32,
    ctypes.c_double,
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_buy.restype = ctypes.c_uint64
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_clear_closed_deals.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_clear_closed_deals.restype = ctypes.c_uint64
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_get_candles.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_int64,
    ctypes.c_int64,
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_get_candles.restype = ctypes.c_uint64
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_get_candles_advanced.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_int64,
    ctypes.c_int64,
    ctypes.c_int64,
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_get_candles_advanced.restype = ctypes.c_uint64
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_get_closed_deals.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_get_closed_deals.restype = ctypes.c_uint64
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_get_opened_deals.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_get_opened_deals.restype = ctypes.c_uint64
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_history.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_uint32,
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_history.restype = ctypes.c_uint64
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_is_demo.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_is_demo.restype = ctypes.c_int8
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_reconnect.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_reconnect.restype = ctypes.c_uint64
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_result.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_result.restype = ctypes.c_uint64
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_result_with_timeout.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_uint64,
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_result_with_timeout.restype = ctypes.c_uint64
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_sell.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_uint32,
    ctypes.c_double,
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_sell.restype = ctypes.c_uint64
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_server_time.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_server_time.restype = ctypes.c_uint64
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_shutdown.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_shutdown.restype = ctypes.c_uint64
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_subscribe.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_uint64,
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_subscribe.restype = ctypes.c_uint64
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_trade.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_uint32,
    ctypes.c_double,
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_trade.restype = ctypes.c_uint64
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_unsubscribe.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_unsubscribe.restype = ctypes.c_uint64
_UniffiLib.uniffi_binary_options_tools_uni_fn_clone_subscriptionstream.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_clone_subscriptionstream.restype = ctypes.c_void_p
_UniffiLib.uniffi_binary_options_tools_uni_fn_free_subscriptionstream.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_free_subscriptionstream.restype = None
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_subscriptionstream_next.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_binary_options_tools_uni_fn_method_subscriptionstream_next.restype = ctypes.c_uint64
_UniffiLib.ffi_binary_options_tools_uni_rustbuffer_alloc.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_binary_options_tools_uni_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_binary_options_tools_uni_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_binary_options_tools_uni_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_binary_options_tools_uni_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_binary_options_tools_uni_rustbuffer_free.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_binary_options_tools_uni_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_u8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_u8.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_u8.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_u8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_i8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_i8.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_i8.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_i8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_u16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_u16.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_u16.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_u16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_i16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_i16.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_i16.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_i16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_u32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_u32.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_u32.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_u32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_i32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_i32.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_i32.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_i32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_u64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_u64.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_u64.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_i64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_i64.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_i64.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_i64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_f32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_f32.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_f32.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_f32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_f64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_f64.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_f64.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_f64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_pointer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_pointer.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_pointer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_void.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_void.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_cancel_void.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_free_void.restype = None
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_void.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_void.restype = None
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_assets.argtypes = (
)
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_assets.restype = ctypes.c_uint16
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_balance.argtypes = (
)
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_balance.restype = ctypes.c_uint16
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_buy.argtypes = (
)
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_buy.restype = ctypes.c_uint16
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_clear_closed_deals.argtypes = (
)
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_clear_closed_deals.restype = ctypes.c_uint16
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_get_candles.argtypes = (
)
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_get_candles.restype = ctypes.c_uint16
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_get_candles_advanced.argtypes = (
)
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_get_candles_advanced.restype = ctypes.c_uint16
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_get_closed_deals.argtypes = (
)
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_get_closed_deals.restype = ctypes.c_uint16
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_get_opened_deals.argtypes = (
)
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_get_opened_deals.restype = ctypes.c_uint16
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_history.argtypes = (
)
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_history.restype = ctypes.c_uint16
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_is_demo.argtypes = (
)
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_is_demo.restype = ctypes.c_uint16
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_reconnect.argtypes = (
)
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_reconnect.restype = ctypes.c_uint16
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_result.argtypes = (
)
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_result.restype = ctypes.c_uint16
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_result_with_timeout.argtypes = (
)
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_result_with_timeout.restype = ctypes.c_uint16
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_sell.argtypes = (
)
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_sell.restype = ctypes.c_uint16
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_server_time.argtypes = (
)
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_server_time.restype = ctypes.c_uint16
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_shutdown.argtypes = (
)
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_shutdown.restype = ctypes.c_uint16
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_subscribe.argtypes = (
)
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_subscribe.restype = ctypes.c_uint16
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_trade.argtypes = (
)
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_trade.restype = ctypes.c_uint16
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_unsubscribe.argtypes = (
)
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_pocketoption_unsubscribe.restype = ctypes.c_uint16
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_subscriptionstream_next.argtypes = (
)
_UniffiLib.uniffi_binary_options_tools_uni_checksum_method_subscriptionstream_next.restype = ctypes.c_uint16
_UniffiLib.uniffi_binary_options_tools_uni_checksum_constructor_pocketoption_new.argtypes = (
)
_UniffiLib.uniffi_binary_options_tools_uni_checksum_constructor_pocketoption_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_binary_options_tools_uni_checksum_constructor_pocketoption_new_with_url.argtypes = (
)
_UniffiLib.uniffi_binary_options_tools_uni_checksum_constructor_pocketoption_new_with_url.restype = ctypes.c_uint16
_UniffiLib.ffi_binary_options_tools_uni_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_binary_options_tools_uni_uniffi_contract_version.restype = ctypes.c_uint32

_uniffi_check_contract_api_version(_UniffiLib)
# _uniffi_check_api_checksums(_UniffiLib)

# Public interface members begin here.


class _UniffiConverterUInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u32"
    VALUE_MIN = 0
    VALUE_MAX = 2**32

    @staticmethod
    def read(buf):
        return buf.read_u32()

    @staticmethod
    def write(value, buf):
        buf.write_u32(value)

class _UniffiConverterInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "i32"
    VALUE_MIN = -2**31
    VALUE_MAX = 2**31

    @staticmethod
    def read(buf):
        return buf.read_i32()

    @staticmethod
    def write(value, buf):
        buf.write_i32(value)

class _UniffiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write(value, buf):
        buf.write_u64(value)

class _UniffiConverterInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "i64"
    VALUE_MIN = -2**63
    VALUE_MAX = 2**63

    @staticmethod
    def read(buf):
        return buf.read_i64()

    @staticmethod
    def write(value, buf):
        buf.write_i64(value)

class _UniffiConverterDouble(_UniffiConverterPrimitiveFloat):
    @staticmethod
    def read(buf):
        return buf.read_double()

    @staticmethod
    def write(value, buf):
        buf.write_double(value)

class _UniffiConverterBool:
    @classmethod
    def check_lower(cls, value):
        return not not value

    @classmethod
    def lower(cls, value):
        return 1 if value else 0

    @staticmethod
    def lift(value):
        return value != 0

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write(cls, value, buf):
        buf.write_u8(value)

class _UniffiConverterString:
    @staticmethod
    def check_lower(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()






class Asset:
    """
    Represents a financial asset that can be traded.

    This struct contains all the information about a specific asset, such as its name, symbol,
    payout, and whether it's currently active.

    # Examples

    ## Python
    ```python
    from binaryoptionstoolsuni import Asset

    # This is an example of how you might receive an Asset object
    # from the API. You would not typically construct this yourself.
    eurusd = Asset(id=1, name="EUR/USD", symbol="EURUSD_otc", is_otc=True, is_active=True, payout=85, allowed_candles=[], asset_type=AssetType.CURRENCY)
    print(eurusd.name)
    ```
    """

    id: "int"
    name: "str"
    symbol: "str"
    is_otc: "bool"
    is_active: "bool"
    payout: "int"
    allowed_candles: "typing.List[CandleLength]"
    asset_type: "AssetType"
    def __init__(self, *, id: "int", name: "str", symbol: "str", is_otc: "bool", is_active: "bool", payout: "int", allowed_candles: "typing.List[CandleLength]", asset_type: "AssetType"):
        self.id = id
        self.name = name
        self.symbol = symbol
        self.is_otc = is_otc
        self.is_active = is_active
        self.payout = payout
        self.allowed_candles = allowed_candles
        self.asset_type = asset_type

    def __str__(self):
        return "Asset(id={}, name={}, symbol={}, is_otc={}, is_active={}, payout={}, allowed_candles={}, asset_type={})".format(self.id, self.name, self.symbol, self.is_otc, self.is_active, self.payout, self.allowed_candles, self.asset_type)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        if self.name != other.name:
            return False
        if self.symbol != other.symbol:
            return False
        if self.is_otc != other.is_otc:
            return False
        if self.is_active != other.is_active:
            return False
        if self.payout != other.payout:
            return False
        if self.allowed_candles != other.allowed_candles:
            return False
        if self.asset_type != other.asset_type:
            return False
        return True

class _UniffiConverterTypeAsset(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Asset(
            id=_UniffiConverterInt32.read(buf),
            name=_UniffiConverterString.read(buf),
            symbol=_UniffiConverterString.read(buf),
            is_otc=_UniffiConverterBool.read(buf),
            is_active=_UniffiConverterBool.read(buf),
            payout=_UniffiConverterInt32.read(buf),
            allowed_candles=_UniffiConverterSequenceTypeCandleLength.read(buf),
            asset_type=_UniffiConverterTypeAssetType.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterInt32.check_lower(value.id)
        _UniffiConverterString.check_lower(value.name)
        _UniffiConverterString.check_lower(value.symbol)
        _UniffiConverterBool.check_lower(value.is_otc)
        _UniffiConverterBool.check_lower(value.is_active)
        _UniffiConverterInt32.check_lower(value.payout)
        _UniffiConverterSequenceTypeCandleLength.check_lower(value.allowed_candles)
        _UniffiConverterTypeAssetType.check_lower(value.asset_type)

    @staticmethod
    def write(value, buf):
        _UniffiConverterInt32.write(value.id, buf)
        _UniffiConverterString.write(value.name, buf)
        _UniffiConverterString.write(value.symbol, buf)
        _UniffiConverterBool.write(value.is_otc, buf)
        _UniffiConverterBool.write(value.is_active, buf)
        _UniffiConverterInt32.write(value.payout, buf)
        _UniffiConverterSequenceTypeCandleLength.write(value.allowed_candles, buf)
        _UniffiConverterTypeAssetType.write(value.asset_type, buf)


class Candle:
    """
    Represents a single candle in a price chart.

    A candle represents the price movement of an asset over a specific time period.
    It contains the open, high, low, and close (OHLC) prices for that period.

    # Examples

    ## Python
    ```python
    from binaryoptionstoolsuni import Candle

    # This is an example of how you might receive a Candle object
    # from the API.
    candle = ... # receive from api.get_candles() or stream.next()
    print(f"Candle for {candle.symbol} at {candle.timestamp}: O={candle.open}, H={candle.high}, L={candle.low}, C={candle.close}")
    ```
    """

    symbol: "str"
    timestamp: "int"
    open: "float"
    high: "float"
    low: "float"
    close: "float"
    volume: "typing.Optional[float]"
    def __init__(self, *, symbol: "str", timestamp: "int", open: "float", high: "float", low: "float", close: "float", volume: "typing.Optional[float]"):
        self.symbol = symbol
        self.timestamp = timestamp
        self.open = open
        self.high = high
        self.low = low
        self.close = close
        self.volume = volume

    def __str__(self):
        return "Candle(symbol={}, timestamp={}, open={}, high={}, low={}, close={}, volume={})".format(self.symbol, self.timestamp, self.open, self.high, self.low, self.close, self.volume)

    def __eq__(self, other):
        if self.symbol != other.symbol:
            return False
        if self.timestamp != other.timestamp:
            return False
        if self.open != other.open:
            return False
        if self.high != other.high:
            return False
        if self.low != other.low:
            return False
        if self.close != other.close:
            return False
        if self.volume != other.volume:
            return False
        return True

class _UniffiConverterTypeCandle(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Candle(
            symbol=_UniffiConverterString.read(buf),
            timestamp=_UniffiConverterInt64.read(buf),
            open=_UniffiConverterDouble.read(buf),
            high=_UniffiConverterDouble.read(buf),
            low=_UniffiConverterDouble.read(buf),
            close=_UniffiConverterDouble.read(buf),
            volume=_UniffiConverterOptionalDouble.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.symbol)
        _UniffiConverterInt64.check_lower(value.timestamp)
        _UniffiConverterDouble.check_lower(value.open)
        _UniffiConverterDouble.check_lower(value.high)
        _UniffiConverterDouble.check_lower(value.low)
        _UniffiConverterDouble.check_lower(value.close)
        _UniffiConverterOptionalDouble.check_lower(value.volume)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.symbol, buf)
        _UniffiConverterInt64.write(value.timestamp, buf)
        _UniffiConverterDouble.write(value.open, buf)
        _UniffiConverterDouble.write(value.high, buf)
        _UniffiConverterDouble.write(value.low, buf)
        _UniffiConverterDouble.write(value.close, buf)
        _UniffiConverterOptionalDouble.write(value.volume, buf)


class CandleLength:
    """
    Represents the duration of a candle.

    This struct is a simple wrapper around a `u32` that represents the candle duration in seconds.
    It is used in the `Asset` struct to specify the allowed candle lengths for an asset.

    # Examples

    ## Python
    ```python
    from binaryoptionstoolsuni import CandleLength

    five_second_candle = CandleLength(time=5)
    ```
    """

    time: "int"
    def __init__(self, *, time: "int"):
        self.time = time

    def __str__(self):
        return "CandleLength(time={})".format(self.time)

    def __eq__(self, other):
        if self.time != other.time:
            return False
        return True

class _UniffiConverterTypeCandleLength(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return CandleLength(
            time=_UniffiConverterUInt32.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt32.check_lower(value.time)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt32.write(value.time, buf)


class Deal:
    """
    Represents a completed trade.

    This struct contains all the information about a trade that has been opened and subsequently closed.
    It includes details such as the open and close prices, profit, and timestamps.

    # Examples

    ## Python
    ```python
    from binaryoptionstoolsuni import Deal

    # This is an example of how you might receive a Deal object
    # from the API after a trade is completed.
    # You would not typically construct this yourself.
    deal = ... # receive from api.result()
    print(f"Trade {deal.id} on {deal.asset} resulted in a profit of {deal.profit}")
    ```
    """

    id: "str"
    open_time: "str"
    close_time: "str"
    open_timestamp: "int"
    close_timestamp: "int"
    uid: "int"
    request_id: "typing.Optional[str]"
    amount: "float"
    profit: "float"
    percent_profit: "int"
    percent_loss: "int"
    open_price: "float"
    close_price: "float"
    command: "int"
    asset: "str"
    is_demo: "int"
    copy_ticket: "str"
    open_ms: "int"
    close_ms: "typing.Optional[int]"
    option_type: "int"
    is_rollover: "typing.Optional[bool]"
    is_copy_signal: "typing.Optional[bool]"
    is_ai: "typing.Optional[bool]"
    currency: "str"
    amount_usd: "typing.Optional[float]"
    amount_usd2: "typing.Optional[float]"
    def __init__(self, *, id: "str", open_time: "str", close_time: "str", open_timestamp: "int", close_timestamp: "int", uid: "int", request_id: "typing.Optional[str]", amount: "float", profit: "float", percent_profit: "int", percent_loss: "int", open_price: "float", close_price: "float", command: "int", asset: "str", is_demo: "int", copy_ticket: "str", open_ms: "int", close_ms: "typing.Optional[int]", option_type: "int", is_rollover: "typing.Optional[bool]", is_copy_signal: "typing.Optional[bool]", is_ai: "typing.Optional[bool]", currency: "str", amount_usd: "typing.Optional[float]", amount_usd2: "typing.Optional[float]"):
        self.id = id
        self.open_time = open_time
        self.close_time = close_time
        self.open_timestamp = open_timestamp
        self.close_timestamp = close_timestamp
        self.uid = uid
        self.request_id = request_id
        self.amount = amount
        self.profit = profit
        self.percent_profit = percent_profit
        self.percent_loss = percent_loss
        self.open_price = open_price
        self.close_price = close_price
        self.command = command
        self.asset = asset
        self.is_demo = is_demo
        self.copy_ticket = copy_ticket
        self.open_ms = open_ms
        self.close_ms = close_ms
        self.option_type = option_type
        self.is_rollover = is_rollover
        self.is_copy_signal = is_copy_signal
        self.is_ai = is_ai
        self.currency = currency
        self.amount_usd = amount_usd
        self.amount_usd2 = amount_usd2

    def __str__(self):
        return "Deal(id={}, open_time={}, close_time={}, open_timestamp={}, close_timestamp={}, uid={}, request_id={}, amount={}, profit={}, percent_profit={}, percent_loss={}, open_price={}, close_price={}, command={}, asset={}, is_demo={}, copy_ticket={}, open_ms={}, close_ms={}, option_type={}, is_rollover={}, is_copy_signal={}, is_ai={}, currency={}, amount_usd={}, amount_usd2={})".format(self.id, self.open_time, self.close_time, self.open_timestamp, self.close_timestamp, self.uid, self.request_id, self.amount, self.profit, self.percent_profit, self.percent_loss, self.open_price, self.close_price, self.command, self.asset, self.is_demo, self.copy_ticket, self.open_ms, self.close_ms, self.option_type, self.is_rollover, self.is_copy_signal, self.is_ai, self.currency, self.amount_usd, self.amount_usd2)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        if self.open_time != other.open_time:
            return False
        if self.close_time != other.close_time:
            return False
        if self.open_timestamp != other.open_timestamp:
            return False
        if self.close_timestamp != other.close_timestamp:
            return False
        if self.uid != other.uid:
            return False
        if self.request_id != other.request_id:
            return False
        if self.amount != other.amount:
            return False
        if self.profit != other.profit:
            return False
        if self.percent_profit != other.percent_profit:
            return False
        if self.percent_loss != other.percent_loss:
            return False
        if self.open_price != other.open_price:
            return False
        if self.close_price != other.close_price:
            return False
        if self.command != other.command:
            return False
        if self.asset != other.asset:
            return False
        if self.is_demo != other.is_demo:
            return False
        if self.copy_ticket != other.copy_ticket:
            return False
        if self.open_ms != other.open_ms:
            return False
        if self.close_ms != other.close_ms:
            return False
        if self.option_type != other.option_type:
            return False
        if self.is_rollover != other.is_rollover:
            return False
        if self.is_copy_signal != other.is_copy_signal:
            return False
        if self.is_ai != other.is_ai:
            return False
        if self.currency != other.currency:
            return False
        if self.amount_usd != other.amount_usd:
            return False
        if self.amount_usd2 != other.amount_usd2:
            return False
        return True

class _UniffiConverterTypeDeal(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Deal(
            id=_UniffiConverterString.read(buf),
            open_time=_UniffiConverterString.read(buf),
            close_time=_UniffiConverterString.read(buf),
            open_timestamp=_UniffiConverterInt64.read(buf),
            close_timestamp=_UniffiConverterInt64.read(buf),
            uid=_UniffiConverterUInt64.read(buf),
            request_id=_UniffiConverterOptionalString.read(buf),
            amount=_UniffiConverterDouble.read(buf),
            profit=_UniffiConverterDouble.read(buf),
            percent_profit=_UniffiConverterInt32.read(buf),
            percent_loss=_UniffiConverterInt32.read(buf),
            open_price=_UniffiConverterDouble.read(buf),
            close_price=_UniffiConverterDouble.read(buf),
            command=_UniffiConverterInt32.read(buf),
            asset=_UniffiConverterString.read(buf),
            is_demo=_UniffiConverterUInt32.read(buf),
            copy_ticket=_UniffiConverterString.read(buf),
            open_ms=_UniffiConverterInt32.read(buf),
            close_ms=_UniffiConverterOptionalInt32.read(buf),
            option_type=_UniffiConverterInt32.read(buf),
            is_rollover=_UniffiConverterOptionalBool.read(buf),
            is_copy_signal=_UniffiConverterOptionalBool.read(buf),
            is_ai=_UniffiConverterOptionalBool.read(buf),
            currency=_UniffiConverterString.read(buf),
            amount_usd=_UniffiConverterOptionalDouble.read(buf),
            amount_usd2=_UniffiConverterOptionalDouble.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.id)
        _UniffiConverterString.check_lower(value.open_time)
        _UniffiConverterString.check_lower(value.close_time)
        _UniffiConverterInt64.check_lower(value.open_timestamp)
        _UniffiConverterInt64.check_lower(value.close_timestamp)
        _UniffiConverterUInt64.check_lower(value.uid)
        _UniffiConverterOptionalString.check_lower(value.request_id)
        _UniffiConverterDouble.check_lower(value.amount)
        _UniffiConverterDouble.check_lower(value.profit)
        _UniffiConverterInt32.check_lower(value.percent_profit)
        _UniffiConverterInt32.check_lower(value.percent_loss)
        _UniffiConverterDouble.check_lower(value.open_price)
        _UniffiConverterDouble.check_lower(value.close_price)
        _UniffiConverterInt32.check_lower(value.command)
        _UniffiConverterString.check_lower(value.asset)
        _UniffiConverterUInt32.check_lower(value.is_demo)
        _UniffiConverterString.check_lower(value.copy_ticket)
        _UniffiConverterInt32.check_lower(value.open_ms)
        _UniffiConverterOptionalInt32.check_lower(value.close_ms)
        _UniffiConverterInt32.check_lower(value.option_type)
        _UniffiConverterOptionalBool.check_lower(value.is_rollover)
        _UniffiConverterOptionalBool.check_lower(value.is_copy_signal)
        _UniffiConverterOptionalBool.check_lower(value.is_ai)
        _UniffiConverterString.check_lower(value.currency)
        _UniffiConverterOptionalDouble.check_lower(value.amount_usd)
        _UniffiConverterOptionalDouble.check_lower(value.amount_usd2)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.id, buf)
        _UniffiConverterString.write(value.open_time, buf)
        _UniffiConverterString.write(value.close_time, buf)
        _UniffiConverterInt64.write(value.open_timestamp, buf)
        _UniffiConverterInt64.write(value.close_timestamp, buf)
        _UniffiConverterUInt64.write(value.uid, buf)
        _UniffiConverterOptionalString.write(value.request_id, buf)
        _UniffiConverterDouble.write(value.amount, buf)
        _UniffiConverterDouble.write(value.profit, buf)
        _UniffiConverterInt32.write(value.percent_profit, buf)
        _UniffiConverterInt32.write(value.percent_loss, buf)
        _UniffiConverterDouble.write(value.open_price, buf)
        _UniffiConverterDouble.write(value.close_price, buf)
        _UniffiConverterInt32.write(value.command, buf)
        _UniffiConverterString.write(value.asset, buf)
        _UniffiConverterUInt32.write(value.is_demo, buf)
        _UniffiConverterString.write(value.copy_ticket, buf)
        _UniffiConverterInt32.write(value.open_ms, buf)
        _UniffiConverterOptionalInt32.write(value.close_ms, buf)
        _UniffiConverterInt32.write(value.option_type, buf)
        _UniffiConverterOptionalBool.write(value.is_rollover, buf)
        _UniffiConverterOptionalBool.write(value.is_copy_signal, buf)
        _UniffiConverterOptionalBool.write(value.is_ai, buf)
        _UniffiConverterString.write(value.currency, buf)
        _UniffiConverterOptionalDouble.write(value.amount_usd, buf)
        _UniffiConverterOptionalDouble.write(value.amount_usd2, buf)





class Action(enum.Enum):
    """
    Represents the action to take in a trade.

    This enum is used to specify whether a trade is a "Call" (buy) or a "Put" (sell).
    It's a fundamental concept in binary options trading.

    # Examples

    ## Python
    ```python
    from binaryoptionstoolsuni import Action

    buy_action = Action.CALL
    sell_action = Action.PUT
    ```

    ## Swift
    ```swift
    import binaryoptionstoolsuni

    let buyAction = Action.call
    let sellAction = Action.put
    ```

    ## Kotlin
    ```kotlin
    import uniffi.binaryoptionstoolsuni.Action

    val buyAction = Action.CALL
    val sellAction = Action.PUT
    ```

    ## C#
    ```csharp
    using UniFFI.BinaryOptionsToolsUni;

    var buyAction = Action.Call;
    var sellAction = Action.Put;
    ```

    ## Go
    ```go
    import "github.com/your-repo/binaryoptionstoolsuni"

    var buyAction = binaryoptionstoolsuni.ActionCall
    var sellAction = binaryoptionstoolsuni.ActionPut
    ```
    """

    CALL = 0
    
    PUT = 1
    


class _UniffiConverterTypeAction(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return Action.CALL
        if variant == 2:
            return Action.PUT
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == Action.CALL:
            return
        if value == Action.PUT:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == Action.CALL:
            buf.write_i32(1)
        if value == Action.PUT:
            buf.write_i32(2)







class AssetType(enum.Enum):
    """
    Represents the type of an asset.

    This enum is used to categorize assets into different types, such as stocks, currencies, etc.
    This information can be useful for filtering and organizing assets.

    # Examples

    ## Python
    ```python
    from binaryoptionstoolsuni import AssetType

    asset_type = AssetType.CURRENCY
    ```
    """

    STOCK = 0
    
    CURRENCY = 1
    
    COMMODITY = 2
    
    CRYPTOCURRENCY = 3
    
    INDEX = 4
    


class _UniffiConverterTypeAssetType(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return AssetType.STOCK
        if variant == 2:
            return AssetType.CURRENCY
        if variant == 3:
            return AssetType.COMMODITY
        if variant == 4:
            return AssetType.CRYPTOCURRENCY
        if variant == 5:
            return AssetType.INDEX
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == AssetType.STOCK:
            return
        if value == AssetType.CURRENCY:
            return
        if value == AssetType.COMMODITY:
            return
        if value == AssetType.CRYPTOCURRENCY:
            return
        if value == AssetType.INDEX:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == AssetType.STOCK:
            buf.write_i32(1)
        if value == AssetType.CURRENCY:
            buf.write_i32(2)
        if value == AssetType.COMMODITY:
            buf.write_i32(3)
        if value == AssetType.CRYPTOCURRENCY:
            buf.write_i32(4)
        if value == AssetType.INDEX:
            buf.write_i32(5)




# UniError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class UniError(Exception):
    pass

_UniffiTempUniError = UniError

class UniError:  # type: ignore
    class BinaryOptions(_UniffiTempUniError):
        def __init__(self, *values):
            if len(values) != 1:
                raise TypeError(f"Expected 1 arguments, found {len(values)}")
            if not isinstance(values[0], str):
                raise TypeError(f"unexpected type for tuple element 0 - expected 'str', got '{type(values[0])}'")
            super().__init__(", ".join(map(repr, values)))
            self._values = values

        def __getitem__(self, index):
            return self._values[index]

        def __repr__(self):
            return "UniError.BinaryOptions({})".format(str(self))
    _UniffiTempUniError.BinaryOptions = BinaryOptions # type: ignore

UniError = _UniffiTempUniError # type: ignore
del _UniffiTempUniError


class _UniffiConverterTypeUniError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return UniError.BinaryOptions(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, UniError.BinaryOptions):
            _UniffiConverterString.check_lower(value._values[0])
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, UniError.BinaryOptions):
            buf.write_i32(1)
            _UniffiConverterString.write(value._values[0], buf)



class _UniffiConverterOptionalInt32(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterInt32.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterInt32.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterInt32.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalDouble(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterDouble.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterDouble.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterDouble.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalBool(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterBool.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterBool.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterBool.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalSequenceTypeAsset(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterSequenceTypeAsset.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterSequenceTypeAsset.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterSequenceTypeAsset.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterSequenceTypeAsset(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeAsset.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeAsset.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeAsset.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeCandle(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeCandle.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeCandle.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeCandle.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeCandleLength(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeCandleLength.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeCandleLength.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeCandleLength.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeDeal(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeDeal.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeDeal.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeDeal.read(buf) for i in range(count)
        ]

# objects.
class PocketOptionProtocol(typing.Protocol):
    """
    The main client for interacting with the PocketOption platform.

    This object provides all the functionality needed to connect to PocketOption,
    place trades, get account information, and subscribe to market data.

    It is the primary entry point for using this library.

    # Rationale

    This struct wraps the underlying `binary_options_tools::pocketoption::PocketOption` client,
    exposing its functionality in a way that is compatible with UniFFI for creating
    multi-language bindings.
    """

    def assets(self, ):
        """
        Gets the list of available assets for trading.

        # Returns

        A list of `Asset` objects, or `None` if the assets have not been loaded yet.
        """

        raise NotImplementedError
    def balance(self, ):
        """
        Gets the current balance of the account.

        This method retrieves the current trading balance from the client's state.

        # Returns

        The current balance as a floating-point number.
        """

        raise NotImplementedError
    def buy(self, asset: "str",time: "int",amount: "float"):
        """
        Places a "Call" (buy) trade.

        This is a convenience method that calls `trade` with `Action.Call`.
        """

        raise NotImplementedError
    def clear_closed_deals(self, ):
        """
        Clears the list of closed deals from the client's state.
        """

        raise NotImplementedError
    def get_candles(self, asset: "str",period: "int",offset: "int"):
        """
        Gets historical candle data for a specific asset.
        """

        raise NotImplementedError
    def get_candles_advanced(self, asset: "str",period: "int",time: "int",offset: "int"):
        """
        Gets historical candle data for a specific asset with advanced parameters.
        """

        raise NotImplementedError
    def get_closed_deals(self, ):
        """
        Gets the list of currently closed deals.
        """

        raise NotImplementedError
    def get_opened_deals(self, ):
        """
        Gets the list of currently opened deals.
        """

        raise NotImplementedError
    def history(self, asset: "str",period: "int"):
        """
        Gets historical candle data for a specific asset and period.
        """

        raise NotImplementedError
    def is_demo(self, ):
        """
        Checks if the current session is a demo account.

        # Returns

        `true` if the account is a demo account, `false` otherwise.
        """

        raise NotImplementedError
    def reconnect(self, ):
        """
        Disconnects and reconnects the client.
        """

        raise NotImplementedError
    def result(self, id: "str"):
        """
        Checks the result of a trade by its ID.

        # Arguments

        * `id` - The ID of the trade to check (as a string).

        # Returns

        A `Deal` object representing the completed trade.
        """

        raise NotImplementedError
    def result_with_timeout(self, id: "str",timeout_secs: "int"):
        """
        Checks the result of a trade by its ID with a timeout.

        # Arguments

        * `id` - The ID of the trade to check (as a string).
        * `timeout_secs` - The maximum time to wait for the result in seconds.

        # Returns

        A `Deal` object representing the completed trade.
        """

        raise NotImplementedError
    def sell(self, asset: "str",time: "int",amount: "float"):
        """
        Places a "Put" (sell) trade.

        This is a convenience method that calls `trade` with `Action.Put`.
        """

        raise NotImplementedError
    def server_time(self, ):
        """
        Gets the current server time as a Unix timestamp.
        """

        raise NotImplementedError
    def shutdown(self, ):
        """
        Shuts down the client and stops all background tasks.

        This method should be called when you are finished with the client
        to ensure a graceful shutdown.
        """

        raise NotImplementedError
    def subscribe(self, asset: "str",duration_secs: "int"):
        """
        Subscribes to real-time candle data for a specific asset.

        # Arguments

        * `asset` - The symbol of the asset to subscribe to.
        * `duration_secs` - The duration of each candle in seconds.

        # Returns

        A `SubscriptionStream` object that can be used to receive candle data.
        """

        raise NotImplementedError
    def trade(self, asset: "str",action: "Action",time: "int",amount: "float"):
        """
        Places a trade.

        This is the core method for executing trades.

        # Arguments

        * `asset` - The symbol of the asset to trade (e.g., "EURUSD_otc").
        * `action` - The direction of the trade (`Action.Call` or `Action.Put`).
        * `time` - The duration of the trade in seconds.
        * `amount` - The amount to trade.

        # Returns

        A `Deal` object representing the completed trade.
        """

        raise NotImplementedError
    def unsubscribe(self, asset: "str"):
        """
        Unsubscribes from real-time candle data for a specific asset.
        """

        raise NotImplementedError
# PocketOption is a Rust-only trait - it's a wrapper around a Rust implementation.
class PocketOption():
    """
    The main client for interacting with the PocketOption platform.

    This object provides all the functionality needed to connect to PocketOption,
    place trades, get account information, and subscribe to market data.

    It is the primary entry point for using this library.

    # Rationale

    This struct wraps the underlying `binary_options_tools::pocketoption::PocketOption` client,
    exposing its functionality in a way that is compatible with UniFFI for creating
    multi-language bindings.
    """

    _pointer: ctypes.c_void_p
    def __init__(self, *args, **kw):
        raise ValueError("async constructors not supported.")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_binary_options_tools_uni_fn_free_pocketoption, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_binary_options_tools_uni_fn_clone_pocketoption, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst
    @classmethod
    async def new_with_url(cls, ssid: "str",url: "str"):
        """
        Creates a new instance of the PocketOption client with a custom WebSocket URL.

        This constructor is useful for connecting to different PocketOption servers,
        for example, in different regions.

        # Arguments

        * `ssid` - The session ID for your PocketOption account.
        * `url` - The custom WebSocket URL to connect to.
        """

        _UniffiConverterString.check_lower(ssid)
        
        _UniffiConverterString.check_lower(url)
        

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_binary_options_tools_uni_fn_constructor_pocketoption_new_with_url(
        _UniffiConverterString.lower(ssid),
        _UniffiConverterString.lower(url)),
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_pointer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_pointer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_free_pointer,
            _UniffiConverterTypePocketOption.lift,
            
    # Error FFI converter
_UniffiConverterTypeUniError,

        )


    async def assets(self, ) -> "typing.Optional[typing.List[Asset]]":
        """
        Gets the list of available assets for trading.

        # Returns

        A list of `Asset` objects, or `None` if the assets have not been loaded yet.
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_assets(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterOptionalSequenceTypeAsset.lift,
            
    # Error FFI converter

    None,

        )



    async def balance(self, ) -> "float":
        """
        Gets the current balance of the account.

        This method retrieves the current trading balance from the client's state.

        # Returns

        The current balance as a floating-point number.
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_balance(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_f64,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_f64,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_free_f64,
            # lift function
            _UniffiConverterDouble.lift,
            
    # Error FFI converter

    None,

        )



    async def buy(self, asset: "str",time: "int",amount: "float") -> "Deal":
        """
        Places a "Call" (buy) trade.

        This is a convenience method that calls `trade` with `Action.Call`.
        """

        _UniffiConverterString.check_lower(asset)
        
        _UniffiConverterUInt32.check_lower(time)
        
        _UniffiConverterDouble.check_lower(amount)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_buy(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(asset),
        _UniffiConverterUInt32.lower(time),
        _UniffiConverterDouble.lower(amount)
            ),
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeDeal.lift,
            
    # Error FFI converter
_UniffiConverterTypeUniError,

        )



    async def clear_closed_deals(self, ) -> None:

        """
        Clears the list of closed deals from the client's state.
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_clear_closed_deals(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_void,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_void,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter

    None,

        )



    async def get_candles(self, asset: "str",period: "int",offset: "int") -> "typing.List[Candle]":
        """
        Gets historical candle data for a specific asset.
        """

        _UniffiConverterString.check_lower(asset)
        
        _UniffiConverterInt64.check_lower(period)
        
        _UniffiConverterInt64.check_lower(offset)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_get_candles(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(asset),
        _UniffiConverterInt64.lower(period),
        _UniffiConverterInt64.lower(offset)
            ),
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterSequenceTypeCandle.lift,
            
    # Error FFI converter
_UniffiConverterTypeUniError,

        )



    async def get_candles_advanced(self, asset: "str",period: "int",time: "int",offset: "int") -> "typing.List[Candle]":
        """
        Gets historical candle data for a specific asset with advanced parameters.
        """

        _UniffiConverterString.check_lower(asset)
        
        _UniffiConverterInt64.check_lower(period)
        
        _UniffiConverterInt64.check_lower(time)
        
        _UniffiConverterInt64.check_lower(offset)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_get_candles_advanced(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(asset),
        _UniffiConverterInt64.lower(period),
        _UniffiConverterInt64.lower(time),
        _UniffiConverterInt64.lower(offset)
            ),
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterSequenceTypeCandle.lift,
            
    # Error FFI converter
_UniffiConverterTypeUniError,

        )



    async def get_closed_deals(self, ) -> "typing.List[Deal]":
        """
        Gets the list of currently closed deals.
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_get_closed_deals(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterSequenceTypeDeal.lift,
            
    # Error FFI converter

    None,

        )



    async def get_opened_deals(self, ) -> "typing.List[Deal]":
        """
        Gets the list of currently opened deals.
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_get_opened_deals(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterSequenceTypeDeal.lift,
            
    # Error FFI converter

    None,

        )



    async def history(self, asset: "str",period: "int") -> "typing.List[Candle]":
        """
        Gets historical candle data for a specific asset and period.
        """

        _UniffiConverterString.check_lower(asset)
        
        _UniffiConverterUInt32.check_lower(period)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_history(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(asset),
        _UniffiConverterUInt32.lower(period)
            ),
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterSequenceTypeCandle.lift,
            
    # Error FFI converter
_UniffiConverterTypeUniError,

        )




    def is_demo(self, ) -> "bool":
        """
        Checks if the current session is a demo account.

        # Returns

        `true` if the account is a demo account, `false` otherwise.
        """

        return _UniffiConverterBool.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_is_demo,self._uniffi_clone_pointer(),)
        )




    async def reconnect(self, ) -> None:

        """
        Disconnects and reconnects the client.
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_reconnect(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_void,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_void,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeUniError,

        )



    async def result(self, id: "str") -> "Deal":
        """
        Checks the result of a trade by its ID.

        # Arguments

        * `id` - The ID of the trade to check (as a string).

        # Returns

        A `Deal` object representing the completed trade.
        """

        _UniffiConverterString.check_lower(id)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_result(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(id)
            ),
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeDeal.lift,
            
    # Error FFI converter
_UniffiConverterTypeUniError,

        )



    async def result_with_timeout(self, id: "str",timeout_secs: "int") -> "Deal":
        """
        Checks the result of a trade by its ID with a timeout.

        # Arguments

        * `id` - The ID of the trade to check (as a string).
        * `timeout_secs` - The maximum time to wait for the result in seconds.

        # Returns

        A `Deal` object representing the completed trade.
        """

        _UniffiConverterString.check_lower(id)
        
        _UniffiConverterUInt64.check_lower(timeout_secs)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_result_with_timeout(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(id),
        _UniffiConverterUInt64.lower(timeout_secs)
            ),
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeDeal.lift,
            
    # Error FFI converter
_UniffiConverterTypeUniError,

        )



    async def sell(self, asset: "str",time: "int",amount: "float") -> "Deal":
        """
        Places a "Put" (sell) trade.

        This is a convenience method that calls `trade` with `Action.Put`.
        """

        _UniffiConverterString.check_lower(asset)
        
        _UniffiConverterUInt32.check_lower(time)
        
        _UniffiConverterDouble.check_lower(amount)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_sell(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(asset),
        _UniffiConverterUInt32.lower(time),
        _UniffiConverterDouble.lower(amount)
            ),
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeDeal.lift,
            
    # Error FFI converter
_UniffiConverterTypeUniError,

        )



    async def server_time(self, ) -> "int":
        """
        Gets the current server time as a Unix timestamp.
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_server_time(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_i64,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_i64,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_free_i64,
            # lift function
            _UniffiConverterInt64.lift,
            
    # Error FFI converter

    None,

        )



    async def shutdown(self, ) -> None:

        """
        Shuts down the client and stops all background tasks.

        This method should be called when you are finished with the client
        to ensure a graceful shutdown.
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_shutdown(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_void,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_void,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeUniError,

        )



    async def subscribe(self, asset: "str",duration_secs: "int") -> "SubscriptionStream":
        """
        Subscribes to real-time candle data for a specific asset.

        # Arguments

        * `asset` - The symbol of the asset to subscribe to.
        * `duration_secs` - The duration of each candle in seconds.

        # Returns

        A `SubscriptionStream` object that can be used to receive candle data.
        """

        _UniffiConverterString.check_lower(asset)
        
        _UniffiConverterUInt64.check_lower(duration_secs)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_subscribe(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(asset),
        _UniffiConverterUInt64.lower(duration_secs)
            ),
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_pointer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_pointer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_free_pointer,
            # lift function
            _UniffiConverterTypeSubscriptionStream.lift,
            
    # Error FFI converter
_UniffiConverterTypeUniError,

        )



    async def trade(self, asset: "str",action: "Action",time: "int",amount: "float") -> "Deal":
        """
        Places a trade.

        This is the core method for executing trades.

        # Arguments

        * `asset` - The symbol of the asset to trade (e.g., "EURUSD_otc").
        * `action` - The direction of the trade (`Action.Call` or `Action.Put`).
        * `time` - The duration of the trade in seconds.
        * `amount` - The amount to trade.

        # Returns

        A `Deal` object representing the completed trade.
        """

        _UniffiConverterString.check_lower(asset)
        
        _UniffiConverterTypeAction.check_lower(action)
        
        _UniffiConverterUInt32.check_lower(time)
        
        _UniffiConverterDouble.check_lower(amount)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_trade(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(asset),
        _UniffiConverterTypeAction.lower(action),
        _UniffiConverterUInt32.lower(time),
        _UniffiConverterDouble.lower(amount)
            ),
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeDeal.lift,
            
    # Error FFI converter
_UniffiConverterTypeUniError,

        )



    async def unsubscribe(self, asset: "str") -> None:

        """
        Unsubscribes from real-time candle data for a specific asset.
        """

        _UniffiConverterString.check_lower(asset)
        
        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_binary_options_tools_uni_fn_method_pocketoption_unsubscribe(
                self._uniffi_clone_pointer(), 
        _UniffiConverterString.lower(asset)
            ),
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_void,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_void,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_free_void,
            # lift function
            lambda val: None,
            
            
    # Error FFI converter
_UniffiConverterTypeUniError,

        )





class _UniffiConverterTypePocketOption:

    @staticmethod
    def lift(value: int):
        return PocketOption._make_instance_(value)

    @staticmethod
    def check_lower(value: PocketOption):
        if not isinstance(value, PocketOption):
            raise TypeError("Expected PocketOption instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: PocketOptionProtocol):
        if not isinstance(value, PocketOption):
            raise TypeError("Expected PocketOption instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: PocketOptionProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))
class SubscriptionStreamProtocol(typing.Protocol):
    """
    Represents a stream of subscription data.

    This object is returned by the `subscribe` method on the `PocketOption` client.
    It allows you to receive real-time data, such as candles, for a specific asset.

    # Rationale

    Since UniFFI does not support streams directly, this wrapper provides a way to
    consume the stream by repeatedly calling the `next` method.
    """

    def next(self, ):
        """
        Retrieves the next item from the stream.

        This method should be called in a loop to consume the data from the stream.
        It will return `None` when the stream is closed.

        # Returns

        An optional `Candle` object. It will be `None` if the stream has finished.

        # Examples

        ## Python
        ```python
        import asyncio

        async def main():
        # ... (get api object)
        stream = await api.subscribe("EURUSD_otc", 5)
        while True:
        candle = await stream.next()
        if candle is None:
        break
        print(f"New candle: {candle}")

        asyncio.run(main())
        ```

        ## Swift
        ```swift
        func subscribe() async {
        // ... (get api object)
        let stream = try! await api.subscribe(asset: "EURUSD_otc", durationSecs: 5)
        while let candle = try! await stream.next() {
        print("New candle: \(candle)")
        }
        }
        ```
        """

        raise NotImplementedError
# SubscriptionStream is a Rust-only trait - it's a wrapper around a Rust implementation.
class SubscriptionStream():
    """
    Represents a stream of subscription data.

    This object is returned by the `subscribe` method on the `PocketOption` client.
    It allows you to receive real-time data, such as candles, for a specific asset.

    # Rationale

    Since UniFFI does not support streams directly, this wrapper provides a way to
    consume the stream by repeatedly calling the `next` method.
    """

    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_binary_options_tools_uni_fn_free_subscriptionstream, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_binary_options_tools_uni_fn_clone_subscriptionstream, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    async def next(self, ) -> "Candle":
        """
        Retrieves the next item from the stream.

        This method should be called in a loop to consume the data from the stream.
        It will return `None` when the stream is closed.

        # Returns

        An optional `Candle` object. It will be `None` if the stream has finished.

        # Examples

        ## Python
        ```python
        import asyncio

        async def main():
        # ... (get api object)
        stream = await api.subscribe("EURUSD_otc", 5)
        while True:
        candle = await stream.next()
        if candle is None:
        break
        print(f"New candle: {candle}")

        asyncio.run(main())
        ```

        ## Swift
        ```swift
        func subscribe() async {
        // ... (get api object)
        let stream = try! await api.subscribe(asset: "EURUSD_otc", durationSecs: 5)
        while let candle = try! await stream.next() {
        print("New candle: \(candle)")
        }
        }
        ```
        """

        return await _uniffi_rust_call_async(
            _UniffiLib.uniffi_binary_options_tools_uni_fn_method_subscriptionstream_next(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypeCandle.lift,
            
    # Error FFI converter
_UniffiConverterTypeUniError,

        )





class _UniffiConverterTypeSubscriptionStream:

    @staticmethod
    def lift(value: int):
        return SubscriptionStream._make_instance_(value)

    @staticmethod
    def check_lower(value: SubscriptionStream):
        if not isinstance(value, SubscriptionStream):
            raise TypeError("Expected SubscriptionStream instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: SubscriptionStreamProtocol):
        if not isinstance(value, SubscriptionStream):
            raise TypeError("Expected SubscriptionStream instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: SubscriptionStreamProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))

# Async support# RustFuturePoll values
_UNIFFI_RUST_FUTURE_POLL_READY = 0
_UNIFFI_RUST_FUTURE_POLL_MAYBE_READY = 1

# Stores futures for _uniffi_continuation_callback
_UniffiContinuationHandleMap = _UniffiHandleMap()

_UNIFFI_GLOBAL_EVENT_LOOP = None

"""
Set the event loop to use for async functions

This is needed if some async functions run outside of the eventloop, for example:
    - A non-eventloop thread is spawned, maybe from `EventLoop.run_in_executor` or maybe from the
      Rust code spawning its own thread.
    - The Rust code calls an async callback method from a sync callback function, using something
      like `pollster` to block on the async call.

In this case, we need an event loop to run the Python async function, but there's no eventloop set
for the thread.  Use `uniffi_set_event_loop` to force an eventloop to be used in this case.
"""
def uniffi_set_event_loop(eventloop: asyncio.BaseEventLoop):
    global _UNIFFI_GLOBAL_EVENT_LOOP
    _UNIFFI_GLOBAL_EVENT_LOOP = eventloop

def _uniffi_get_event_loop():
    if _UNIFFI_GLOBAL_EVENT_LOOP is not None:
        return _UNIFFI_GLOBAL_EVENT_LOOP
    else:
        return asyncio.get_running_loop()

# Continuation callback for async functions
# lift the return value or error and resolve the future, causing the async function to resume.
@_UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK
def _uniffi_continuation_callback(future_ptr, poll_code):
    (eventloop, future) = _UniffiContinuationHandleMap.remove(future_ptr)
    eventloop.call_soon_threadsafe(_uniffi_set_future_result, future, poll_code)

def _uniffi_set_future_result(future, poll_code):
    if not future.cancelled():
        future.set_result(poll_code)

async def _uniffi_rust_call_async(rust_future, ffi_poll, ffi_complete, ffi_free, lift_func, error_ffi_converter):
    try:
        eventloop = _uniffi_get_event_loop()

        # Loop and poll until we see a _UNIFFI_RUST_FUTURE_POLL_READY value
        while True:
            future = eventloop.create_future()
            ffi_poll(
                rust_future,
                _uniffi_continuation_callback,
                _UniffiContinuationHandleMap.insert((eventloop, future)),
            )
            poll_code = await future
            if poll_code == _UNIFFI_RUST_FUTURE_POLL_READY:
                break

        return lift_func(
            _uniffi_rust_call_with_error(error_ffi_converter, ffi_complete, rust_future)
        )
    finally:
        ffi_free(rust_future)

__all__ = [
    "InternalError",
    "Action",
    "AssetType",
    "UniError",
    "Asset",
    "Candle",
    "CandleLength",
    "Deal",
    "PocketOption",
    "SubscriptionStream",
]

