// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(binary_options_tools_uniFFI)
import binary_options_tools_uniFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_binary_options_tools_uni_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_binary_options_tools_uni_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureBinaryOptionsToolsUniInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterInt32: FfiConverterPrimitive {
    typealias FfiType = Int32
    typealias SwiftType = Int32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int32, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterInt64: FfiConverterPrimitive {
    typealias FfiType = Int64
    typealias SwiftType = Int64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int64, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}




/**
 * The main client for interacting with the PocketOption platform.
 *
 * This object provides all the functionality needed to connect to PocketOption,
 * place trades, get account information, and subscribe to market data.
 *
 * It is the primary entry point for using this library.
 *
 * # Rationale
 *
 * This struct wraps the underlying `binary_options_tools::pocketoption::PocketOption` client,
 * exposing its functionality in a way that is compatible with UniFFI for creating
 * multi-language bindings.
 */
public protocol PocketOptionProtocol: AnyObject, Sendable {
    
    /**
     * Gets the list of available assets for trading.
     *
     * # Returns
     *
     * A list of `Asset` objects, or `None` if the assets have not been loaded yet.
     */
    func assets() async  -> [Asset]?
    
    /**
     * Gets the current balance of the account.
     *
     * This method retrieves the current trading balance from the client's state.
     *
     * # Returns
     *
     * The current balance as a floating-point number.
     */
    func balance() async  -> Double
    
    /**
     * Places a "Call" (buy) trade.
     *
     * This is a convenience method that calls `trade` with `Action.Call`.
     */
    func buy(asset: String, time: UInt32, amount: Double) async throws  -> Deal
    
    /**
     * Clears the list of closed deals from the client's state.
     */
    func clearClosedDeals() async 
    
    /**
     * Gets historical candle data for a specific asset.
     */
    func getCandles(asset: String, period: Int64, offset: Int64) async throws  -> [Candle]
    
    /**
     * Gets historical candle data for a specific asset with advanced parameters.
     */
    func getCandlesAdvanced(asset: String, period: Int64, time: Int64, offset: Int64) async throws  -> [Candle]
    
    /**
     * Gets the list of currently closed deals.
     */
    func getClosedDeals() async  -> [Deal]
    
    /**
     * Gets the list of currently opened deals.
     */
    func getOpenedDeals() async  -> [Deal]
    
    /**
     * Gets historical candle data for a specific asset and period.
     */
    func history(asset: String, period: UInt32) async throws  -> [Candle]
    
    /**
     * Checks if the current session is a demo account.
     *
     * # Returns
     *
     * `true` if the account is a demo account, `false` otherwise.
     */
    func isDemo()  -> Bool
    
    /**
     * Disconnects and reconnects the client.
     */
    func reconnect() async throws 
    
    /**
     * Checks the result of a trade by its ID.
     *
     * # Arguments
     *
     * * `id` - The ID of the trade to check (as a string).
     *
     * # Returns
     *
     * A `Deal` object representing the completed trade.
     */
    func result(id: String) async throws  -> Deal
    
    /**
     * Checks the result of a trade by its ID with a timeout.
     *
     * # Arguments
     *
     * * `id` - The ID of the trade to check (as a string).
     * * `timeout_secs` - The maximum time to wait for the result in seconds.
     *
     * # Returns
     *
     * A `Deal` object representing the completed trade.
     */
    func resultWithTimeout(id: String, timeoutSecs: UInt64) async throws  -> Deal
    
    /**
     * Places a "Put" (sell) trade.
     *
     * This is a convenience method that calls `trade` with `Action.Put`.
     */
    func sell(asset: String, time: UInt32, amount: Double) async throws  -> Deal
    
    /**
     * Gets the current server time as a Unix timestamp.
     */
    func serverTime() async  -> Int64
    
    /**
     * Shuts down the client and stops all background tasks.
     *
     * This method should be called when you are finished with the client
     * to ensure a graceful shutdown.
     */
    func shutdown() async throws 
    
    /**
     * Subscribes to real-time candle data for a specific asset.
     *
     * # Arguments
     *
     * * `asset` - The symbol of the asset to subscribe to.
     * * `duration_secs` - The duration of each candle in seconds.
     *
     * # Returns
     *
     * A `SubscriptionStream` object that can be used to receive candle data.
     */
    func subscribe(asset: String, durationSecs: UInt64) async throws  -> SubscriptionStream
    
    /**
     * Places a trade.
     *
     * This is the core method for executing trades.
     *
     * # Arguments
     *
     * * `asset` - The symbol of the asset to trade (e.g., "EURUSD_otc").
     * * `action` - The direction of the trade (`Action.Call` or `Action.Put`).
     * * `time` - The duration of the trade in seconds.
     * * `amount` - The amount to trade.
     *
     * # Returns
     *
     * A `Deal` object representing the completed trade.
     */
    func trade(asset: String, action: Action, time: UInt32, amount: Double) async throws  -> Deal
    
    /**
     * Unsubscribes from real-time candle data for a specific asset.
     */
    func unsubscribe(asset: String) async throws 
    
}
/**
 * The main client for interacting with the PocketOption platform.
 *
 * This object provides all the functionality needed to connect to PocketOption,
 * place trades, get account information, and subscribe to market data.
 *
 * It is the primary entry point for using this library.
 *
 * # Rationale
 *
 * This struct wraps the underlying `binary_options_tools::pocketoption::PocketOption` client,
 * exposing its functionality in a way that is compatible with UniFFI for creating
 * multi-language bindings.
 */
open class PocketOption: PocketOptionProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_binary_options_tools_uni_fn_clone_pocketoption(self.pointer, $0) }
    }
    /**
     * Creates a new instance of the PocketOption client.
     *
     * This is the primary constructor for the client. It requires a session ID (ssid)
     * to authenticate with the PocketOption servers.
     *
     * # Arguments
     *
     * * `ssid` - The session ID for your PocketOption account.
     *
     * # Examples
     *
     * ## Python
     * ```python
     * import asyncio
     * from binaryoptionstoolsuni import PocketOption
     *
     * async def main():
     * ssid = "YOUR_SESSION_ID"
     * api = await PocketOption.new(ssid)
     * balance = await api.balance()
     * print(f"Balance: {balance}")
     *
     * asyncio.run(main())
     * ```
     */
public convenience init(ssid: String)async throws  {
    let pointer =
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_binary_options_tools_uni_fn_constructor_pocketoption_new(FfiConverterString.lower(ssid)
                )
            },
            pollFunc: ffi_binary_options_tools_uni_rust_future_poll_pointer,
            completeFunc: ffi_binary_options_tools_uni_rust_future_complete_pointer,
            freeFunc: ffi_binary_options_tools_uni_rust_future_free_pointer,
            liftFunc: FfiConverterTypePocketOption_lift,
            errorHandler: FfiConverterTypeUniError_lift
        )
        
        .uniffiClonePointer()
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_binary_options_tools_uni_fn_free_pocketoption(pointer, $0) }
    }

    
    /**
     * Creates a new instance of the PocketOption client.
     *
     * This is the primary constructor for the client. It requires a session ID (ssid)
     * to authenticate with the PocketOption servers.
     *
     * # Arguments
     *
     * * `ssid` - The session ID for your PocketOption account.
     *
     * # Examples
     *
     * ## Python
     * ```python
     * import asyncio
     * from binaryoptionstoolsuni import PocketOption
     *
     * async def main():
     * ssid = "YOUR_SESSION_ID"
     * api = await PocketOption.init(ssid)
     * balance = await api.balance()
     * print(f"Balance: {balance}")
     *
     * asyncio.run(main())
     * ```
     */
public static func `init`(ssid: String)async throws  -> PocketOption  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_binary_options_tools_uni_fn_constructor_pocketoption_init(FfiConverterString.lower(ssid)
                )
            },
            pollFunc: ffi_binary_options_tools_uni_rust_future_poll_pointer,
            completeFunc: ffi_binary_options_tools_uni_rust_future_complete_pointer,
            freeFunc: ffi_binary_options_tools_uni_rust_future_free_pointer,
            liftFunc: FfiConverterTypePocketOption_lift,
            errorHandler: FfiConverterTypeUniError_lift
        )
}
    
    /**
     * Creates a new instance of the PocketOption client with a custom WebSocket URL.
     *
     * This constructor is useful for connecting to different PocketOption servers,
     * for example, in different regions.
     *
     * # Arguments
     *
     * * `ssid` - The session ID for your PocketOption account.
     * * `url` - The custom WebSocket URL to connect to.
     */
public static func newWithUrl(ssid: String, url: String)async throws  -> PocketOption  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_binary_options_tools_uni_fn_constructor_pocketoption_new_with_url(FfiConverterString.lower(ssid),FfiConverterString.lower(url)
                )
            },
            pollFunc: ffi_binary_options_tools_uni_rust_future_poll_pointer,
            completeFunc: ffi_binary_options_tools_uni_rust_future_complete_pointer,
            freeFunc: ffi_binary_options_tools_uni_rust_future_free_pointer,
            liftFunc: FfiConverterTypePocketOption_lift,
            errorHandler: FfiConverterTypeUniError_lift
        )
}
    

    
    /**
     * Gets the list of available assets for trading.
     *
     * # Returns
     *
     * A list of `Asset` objects, or `None` if the assets have not been loaded yet.
     */
open func assets()async  -> [Asset]?  {
    return
        try!  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_binary_options_tools_uni_fn_method_pocketoption_assets(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            completeFunc: ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            freeFunc: ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionSequenceTypeAsset.lift,
            errorHandler: nil
            
        )
}
    
    /**
     * Gets the current balance of the account.
     *
     * This method retrieves the current trading balance from the client's state.
     *
     * # Returns
     *
     * The current balance as a floating-point number.
     */
open func balance()async  -> Double  {
    return
        try!  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_binary_options_tools_uni_fn_method_pocketoption_balance(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_binary_options_tools_uni_rust_future_poll_f64,
            completeFunc: ffi_binary_options_tools_uni_rust_future_complete_f64,
            freeFunc: ffi_binary_options_tools_uni_rust_future_free_f64,
            liftFunc: FfiConverterDouble.lift,
            errorHandler: nil
            
        )
}
    
    /**
     * Places a "Call" (buy) trade.
     *
     * This is a convenience method that calls `trade` with `Action.Call`.
     */
open func buy(asset: String, time: UInt32, amount: Double)async throws  -> Deal  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_binary_options_tools_uni_fn_method_pocketoption_buy(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(asset),FfiConverterUInt32.lower(time),FfiConverterDouble.lower(amount)
                )
            },
            pollFunc: ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            completeFunc: ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            freeFunc: ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeDeal_lift,
            errorHandler: FfiConverterTypeUniError_lift
        )
}
    
    /**
     * Clears the list of closed deals from the client's state.
     */
open func clearClosedDeals()async   {
    return
        try!  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_binary_options_tools_uni_fn_method_pocketoption_clear_closed_deals(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_binary_options_tools_uni_rust_future_poll_void,
            completeFunc: ffi_binary_options_tools_uni_rust_future_complete_void,
            freeFunc: ffi_binary_options_tools_uni_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: nil
            
        )
}
    
    /**
     * Gets historical candle data for a specific asset.
     */
open func getCandles(asset: String, period: Int64, offset: Int64)async throws  -> [Candle]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_binary_options_tools_uni_fn_method_pocketoption_get_candles(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(asset),FfiConverterInt64.lower(period),FfiConverterInt64.lower(offset)
                )
            },
            pollFunc: ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            completeFunc: ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            freeFunc: ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeCandle.lift,
            errorHandler: FfiConverterTypeUniError_lift
        )
}
    
    /**
     * Gets historical candle data for a specific asset with advanced parameters.
     */
open func getCandlesAdvanced(asset: String, period: Int64, time: Int64, offset: Int64)async throws  -> [Candle]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_binary_options_tools_uni_fn_method_pocketoption_get_candles_advanced(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(asset),FfiConverterInt64.lower(period),FfiConverterInt64.lower(time),FfiConverterInt64.lower(offset)
                )
            },
            pollFunc: ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            completeFunc: ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            freeFunc: ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeCandle.lift,
            errorHandler: FfiConverterTypeUniError_lift
        )
}
    
    /**
     * Gets the list of currently closed deals.
     */
open func getClosedDeals()async  -> [Deal]  {
    return
        try!  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_binary_options_tools_uni_fn_method_pocketoption_get_closed_deals(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            completeFunc: ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            freeFunc: ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeDeal.lift,
            errorHandler: nil
            
        )
}
    
    /**
     * Gets the list of currently opened deals.
     */
open func getOpenedDeals()async  -> [Deal]  {
    return
        try!  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_binary_options_tools_uni_fn_method_pocketoption_get_opened_deals(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            completeFunc: ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            freeFunc: ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeDeal.lift,
            errorHandler: nil
            
        )
}
    
    /**
     * Gets historical candle data for a specific asset and period.
     */
open func history(asset: String, period: UInt32)async throws  -> [Candle]  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_binary_options_tools_uni_fn_method_pocketoption_history(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(asset),FfiConverterUInt32.lower(period)
                )
            },
            pollFunc: ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            completeFunc: ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            freeFunc: ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeCandle.lift,
            errorHandler: FfiConverterTypeUniError_lift
        )
}
    
    /**
     * Checks if the current session is a demo account.
     *
     * # Returns
     *
     * `true` if the account is a demo account, `false` otherwise.
     */
open func isDemo() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_binary_options_tools_uni_fn_method_pocketoption_is_demo(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Disconnects and reconnects the client.
     */
open func reconnect()async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_binary_options_tools_uni_fn_method_pocketoption_reconnect(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_binary_options_tools_uni_rust_future_poll_void,
            completeFunc: ffi_binary_options_tools_uni_rust_future_complete_void,
            freeFunc: ffi_binary_options_tools_uni_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeUniError_lift
        )
}
    
    /**
     * Checks the result of a trade by its ID.
     *
     * # Arguments
     *
     * * `id` - The ID of the trade to check (as a string).
     *
     * # Returns
     *
     * A `Deal` object representing the completed trade.
     */
open func result(id: String)async throws  -> Deal  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_binary_options_tools_uni_fn_method_pocketoption_result(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(id)
                )
            },
            pollFunc: ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            completeFunc: ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            freeFunc: ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeDeal_lift,
            errorHandler: FfiConverterTypeUniError_lift
        )
}
    
    /**
     * Checks the result of a trade by its ID with a timeout.
     *
     * # Arguments
     *
     * * `id` - The ID of the trade to check (as a string).
     * * `timeout_secs` - The maximum time to wait for the result in seconds.
     *
     * # Returns
     *
     * A `Deal` object representing the completed trade.
     */
open func resultWithTimeout(id: String, timeoutSecs: UInt64)async throws  -> Deal  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_binary_options_tools_uni_fn_method_pocketoption_result_with_timeout(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(id),FfiConverterUInt64.lower(timeoutSecs)
                )
            },
            pollFunc: ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            completeFunc: ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            freeFunc: ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeDeal_lift,
            errorHandler: FfiConverterTypeUniError_lift
        )
}
    
    /**
     * Places a "Put" (sell) trade.
     *
     * This is a convenience method that calls `trade` with `Action.Put`.
     */
open func sell(asset: String, time: UInt32, amount: Double)async throws  -> Deal  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_binary_options_tools_uni_fn_method_pocketoption_sell(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(asset),FfiConverterUInt32.lower(time),FfiConverterDouble.lower(amount)
                )
            },
            pollFunc: ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            completeFunc: ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            freeFunc: ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeDeal_lift,
            errorHandler: FfiConverterTypeUniError_lift
        )
}
    
    /**
     * Gets the current server time as a Unix timestamp.
     */
open func serverTime()async  -> Int64  {
    return
        try!  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_binary_options_tools_uni_fn_method_pocketoption_server_time(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_binary_options_tools_uni_rust_future_poll_i64,
            completeFunc: ffi_binary_options_tools_uni_rust_future_complete_i64,
            freeFunc: ffi_binary_options_tools_uni_rust_future_free_i64,
            liftFunc: FfiConverterInt64.lift,
            errorHandler: nil
            
        )
}
    
    /**
     * Shuts down the client and stops all background tasks.
     *
     * This method should be called when you are finished with the client
     * to ensure a graceful shutdown.
     */
open func shutdown()async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_binary_options_tools_uni_fn_method_pocketoption_shutdown(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_binary_options_tools_uni_rust_future_poll_void,
            completeFunc: ffi_binary_options_tools_uni_rust_future_complete_void,
            freeFunc: ffi_binary_options_tools_uni_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeUniError_lift
        )
}
    
    /**
     * Subscribes to real-time candle data for a specific asset.
     *
     * # Arguments
     *
     * * `asset` - The symbol of the asset to subscribe to.
     * * `duration_secs` - The duration of each candle in seconds.
     *
     * # Returns
     *
     * A `SubscriptionStream` object that can be used to receive candle data.
     */
open func subscribe(asset: String, durationSecs: UInt64)async throws  -> SubscriptionStream  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_binary_options_tools_uni_fn_method_pocketoption_subscribe(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(asset),FfiConverterUInt64.lower(durationSecs)
                )
            },
            pollFunc: ffi_binary_options_tools_uni_rust_future_poll_pointer,
            completeFunc: ffi_binary_options_tools_uni_rust_future_complete_pointer,
            freeFunc: ffi_binary_options_tools_uni_rust_future_free_pointer,
            liftFunc: FfiConverterTypeSubscriptionStream_lift,
            errorHandler: FfiConverterTypeUniError_lift
        )
}
    
    /**
     * Places a trade.
     *
     * This is the core method for executing trades.
     *
     * # Arguments
     *
     * * `asset` - The symbol of the asset to trade (e.g., "EURUSD_otc").
     * * `action` - The direction of the trade (`Action.Call` or `Action.Put`).
     * * `time` - The duration of the trade in seconds.
     * * `amount` - The amount to trade.
     *
     * # Returns
     *
     * A `Deal` object representing the completed trade.
     */
open func trade(asset: String, action: Action, time: UInt32, amount: Double)async throws  -> Deal  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_binary_options_tools_uni_fn_method_pocketoption_trade(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(asset),FfiConverterTypeAction_lower(action),FfiConverterUInt32.lower(time),FfiConverterDouble.lower(amount)
                )
            },
            pollFunc: ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            completeFunc: ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            freeFunc: ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeDeal_lift,
            errorHandler: FfiConverterTypeUniError_lift
        )
}
    
    /**
     * Unsubscribes from real-time candle data for a specific asset.
     */
open func unsubscribe(asset: String)async throws   {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_binary_options_tools_uni_fn_method_pocketoption_unsubscribe(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(asset)
                )
            },
            pollFunc: ffi_binary_options_tools_uni_rust_future_poll_void,
            completeFunc: ffi_binary_options_tools_uni_rust_future_complete_void,
            freeFunc: ffi_binary_options_tools_uni_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeUniError_lift
        )
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePocketOption: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = PocketOption

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> PocketOption {
        return PocketOption(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: PocketOption) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PocketOption {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: PocketOption, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePocketOption_lift(_ pointer: UnsafeMutableRawPointer) throws -> PocketOption {
    return try FfiConverterTypePocketOption.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePocketOption_lower(_ value: PocketOption) -> UnsafeMutableRawPointer {
    return FfiConverterTypePocketOption.lower(value)
}






/**
 * Represents a stream of subscription data.
 *
 * This object is returned by the `subscribe` method on the `PocketOption` client.
 * It allows you to receive real-time data, such as candles, for a specific asset.
 *
 * # Rationale
 *
 * Since UniFFI does not support streams directly, this wrapper provides a way to
 * consume the stream by repeatedly calling the `next` method.
 */
public protocol SubscriptionStreamProtocol: AnyObject, Sendable {
    
    /**
     * Retrieves the next item from the stream.
     *
     * This method should be called in a loop to consume the data from the stream.
     * It will return `None` when the stream is closed.
     *
     * # Returns
     *
     * An optional `Candle` object. It will be `None` if the stream has finished.
     *
     * # Examples
     *
     * ## Python
     * ```python
     * import asyncio
     *
     * async def main():
     * # ... (get api object)
     * stream = await api.subscribe("EURUSD_otc", 5)
     * while True:
     * candle = await stream.next()
     * if candle is None:
     * break
     * print(f"New candle: {candle}")
     *
     * asyncio.run(main())
     * ```
     *
     * ## Swift
     * ```swift
     * func subscribe() async {
     * // ... (get api object)
     * let stream = try! await api.subscribe(asset: "EURUSD_otc", durationSecs: 5)
     * while let candle = try! await stream.next() {
     * print("New candle: \(candle)")
     * }
     * }
     * ```
     */
    func next() async throws  -> Candle
    
}
/**
 * Represents a stream of subscription data.
 *
 * This object is returned by the `subscribe` method on the `PocketOption` client.
 * It allows you to receive real-time data, such as candles, for a specific asset.
 *
 * # Rationale
 *
 * Since UniFFI does not support streams directly, this wrapper provides a way to
 * consume the stream by repeatedly calling the `next` method.
 */
open class SubscriptionStream: SubscriptionStreamProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_binary_options_tools_uni_fn_clone_subscriptionstream(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_binary_options_tools_uni_fn_free_subscriptionstream(pointer, $0) }
    }

    

    
    /**
     * Retrieves the next item from the stream.
     *
     * This method should be called in a loop to consume the data from the stream.
     * It will return `None` when the stream is closed.
     *
     * # Returns
     *
     * An optional `Candle` object. It will be `None` if the stream has finished.
     *
     * # Examples
     *
     * ## Python
     * ```python
     * import asyncio
     *
     * async def main():
     * # ... (get api object)
     * stream = await api.subscribe("EURUSD_otc", 5)
     * while True:
     * candle = await stream.next()
     * if candle is None:
     * break
     * print(f"New candle: {candle}")
     *
     * asyncio.run(main())
     * ```
     *
     * ## Swift
     * ```swift
     * func subscribe() async {
     * // ... (get api object)
     * let stream = try! await api.subscribe(asset: "EURUSD_otc", durationSecs: 5)
     * while let candle = try! await stream.next() {
     * print("New candle: \(candle)")
     * }
     * }
     * ```
     */
open func next()async throws  -> Candle  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_binary_options_tools_uni_fn_method_subscriptionstream_next(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_binary_options_tools_uni_rust_future_poll_rust_buffer,
            completeFunc: ffi_binary_options_tools_uni_rust_future_complete_rust_buffer,
            freeFunc: ffi_binary_options_tools_uni_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeCandle_lift,
            errorHandler: FfiConverterTypeUniError_lift
        )
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSubscriptionStream: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SubscriptionStream

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SubscriptionStream {
        return SubscriptionStream(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SubscriptionStream) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SubscriptionStream {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SubscriptionStream, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSubscriptionStream_lift(_ pointer: UnsafeMutableRawPointer) throws -> SubscriptionStream {
    return try FfiConverterTypeSubscriptionStream.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSubscriptionStream_lower(_ value: SubscriptionStream) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSubscriptionStream.lower(value)
}




/**
 * Represents a financial asset that can be traded.
 *
 * This struct contains all the information about a specific asset, such as its name, symbol,
 * payout, and whether it's currently active.
 *
 * # Examples
 *
 * ## Python
 * ```python
 * from binaryoptionstoolsuni import Asset
 *
 * # This is an example of how you might receive an Asset object
 * # from the API. You would not typically construct this yourself.
 * eurusd = Asset(id=1, name="EUR/USD", symbol="EURUSD_otc", is_otc=True, is_active=True, payout=85, allowed_candles=[], asset_type=AssetType.CURRENCY)
 * print(eurusd.name)
 * ```
 */
public struct Asset {
    public var id: Int32
    public var name: String
    public var symbol: String
    public var isOtc: Bool
    public var isActive: Bool
    public var payout: Int32
    public var allowedCandles: [CandleLength]
    public var assetType: AssetType

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: Int32, name: String, symbol: String, isOtc: Bool, isActive: Bool, payout: Int32, allowedCandles: [CandleLength], assetType: AssetType) {
        self.id = id
        self.name = name
        self.symbol = symbol
        self.isOtc = isOtc
        self.isActive = isActive
        self.payout = payout
        self.allowedCandles = allowedCandles
        self.assetType = assetType
    }
}

#if compiler(>=6)
extension Asset: Sendable {}
#endif


extension Asset: Equatable, Hashable {
    public static func ==(lhs: Asset, rhs: Asset) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        if lhs.symbol != rhs.symbol {
            return false
        }
        if lhs.isOtc != rhs.isOtc {
            return false
        }
        if lhs.isActive != rhs.isActive {
            return false
        }
        if lhs.payout != rhs.payout {
            return false
        }
        if lhs.allowedCandles != rhs.allowedCandles {
            return false
        }
        if lhs.assetType != rhs.assetType {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(name)
        hasher.combine(symbol)
        hasher.combine(isOtc)
        hasher.combine(isActive)
        hasher.combine(payout)
        hasher.combine(allowedCandles)
        hasher.combine(assetType)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAsset: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Asset {
        return
            try Asset(
                id: FfiConverterInt32.read(from: &buf), 
                name: FfiConverterString.read(from: &buf), 
                symbol: FfiConverterString.read(from: &buf), 
                isOtc: FfiConverterBool.read(from: &buf), 
                isActive: FfiConverterBool.read(from: &buf), 
                payout: FfiConverterInt32.read(from: &buf), 
                allowedCandles: FfiConverterSequenceTypeCandleLength.read(from: &buf), 
                assetType: FfiConverterTypeAssetType.read(from: &buf)
        )
    }

    public static func write(_ value: Asset, into buf: inout [UInt8]) {
        FfiConverterInt32.write(value.id, into: &buf)
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.symbol, into: &buf)
        FfiConverterBool.write(value.isOtc, into: &buf)
        FfiConverterBool.write(value.isActive, into: &buf)
        FfiConverterInt32.write(value.payout, into: &buf)
        FfiConverterSequenceTypeCandleLength.write(value.allowedCandles, into: &buf)
        FfiConverterTypeAssetType.write(value.assetType, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAsset_lift(_ buf: RustBuffer) throws -> Asset {
    return try FfiConverterTypeAsset.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAsset_lower(_ value: Asset) -> RustBuffer {
    return FfiConverterTypeAsset.lower(value)
}


/**
 * Represents a single candle in a price chart.
 *
 * A candle represents the price movement of an asset over a specific time period.
 * It contains the open, high, low, and close (OHLC) prices for that period.
 *
 * # Examples
 *
 * ## Python
 * ```python
 * from binaryoptionstoolsuni import Candle
 *
 * # This is an example of how you might receive a Candle object
 * # from the API.
 * candle = ... # receive from api.get_candles() or stream.next()
 * print(f"Candle for {candle.symbol} at {candle.timestamp}: O={candle.open}, H={candle.high}, L={candle.low}, C={candle.close}")
 * ```
 */
public struct Candle {
    public var symbol: String
    public var timestamp: Int64
    public var `open`: Double
    public var high: Double
    public var low: Double
    public var close: Double
    public var volume: Double?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(symbol: String, timestamp: Int64, `open`: Double, high: Double, low: Double, close: Double, volume: Double?) {
        self.symbol = symbol
        self.timestamp = timestamp
        self.`open` = `open`
        self.high = high
        self.low = low
        self.close = close
        self.volume = volume
    }
}

#if compiler(>=6)
extension Candle: Sendable {}
#endif


extension Candle: Equatable, Hashable {
    public static func ==(lhs: Candle, rhs: Candle) -> Bool {
        if lhs.symbol != rhs.symbol {
            return false
        }
        if lhs.timestamp != rhs.timestamp {
            return false
        }
        if lhs.`open` != rhs.`open` {
            return false
        }
        if lhs.high != rhs.high {
            return false
        }
        if lhs.low != rhs.low {
            return false
        }
        if lhs.close != rhs.close {
            return false
        }
        if lhs.volume != rhs.volume {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(symbol)
        hasher.combine(timestamp)
        hasher.combine(`open`)
        hasher.combine(high)
        hasher.combine(low)
        hasher.combine(close)
        hasher.combine(volume)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCandle: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Candle {
        return
            try Candle(
                symbol: FfiConverterString.read(from: &buf), 
                timestamp: FfiConverterInt64.read(from: &buf), 
                open: FfiConverterDouble.read(from: &buf), 
                high: FfiConverterDouble.read(from: &buf), 
                low: FfiConverterDouble.read(from: &buf), 
                close: FfiConverterDouble.read(from: &buf), 
                volume: FfiConverterOptionDouble.read(from: &buf)
        )
    }

    public static func write(_ value: Candle, into buf: inout [UInt8]) {
        FfiConverterString.write(value.symbol, into: &buf)
        FfiConverterInt64.write(value.timestamp, into: &buf)
        FfiConverterDouble.write(value.`open`, into: &buf)
        FfiConverterDouble.write(value.high, into: &buf)
        FfiConverterDouble.write(value.low, into: &buf)
        FfiConverterDouble.write(value.close, into: &buf)
        FfiConverterOptionDouble.write(value.volume, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCandle_lift(_ buf: RustBuffer) throws -> Candle {
    return try FfiConverterTypeCandle.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCandle_lower(_ value: Candle) -> RustBuffer {
    return FfiConverterTypeCandle.lower(value)
}


/**
 * Represents the duration of a candle.
 *
 * This struct is a simple wrapper around a `u32` that represents the candle duration in seconds.
 * It is used in the `Asset` struct to specify the allowed candle lengths for an asset.
 *
 * # Examples
 *
 * ## Python
 * ```python
 * from binaryoptionstoolsuni import CandleLength
 *
 * five_second_candle = CandleLength(time=5)
 * ```
 */
public struct CandleLength {
    public var time: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(time: UInt32) {
        self.time = time
    }
}

#if compiler(>=6)
extension CandleLength: Sendable {}
#endif


extension CandleLength: Equatable, Hashable {
    public static func ==(lhs: CandleLength, rhs: CandleLength) -> Bool {
        if lhs.time != rhs.time {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(time)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCandleLength: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CandleLength {
        return
            try CandleLength(
                time: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: CandleLength, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.time, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCandleLength_lift(_ buf: RustBuffer) throws -> CandleLength {
    return try FfiConverterTypeCandleLength.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCandleLength_lower(_ value: CandleLength) -> RustBuffer {
    return FfiConverterTypeCandleLength.lower(value)
}


/**
 * Represents a completed trade.
 *
 * This struct contains all the information about a trade that has been opened and subsequently closed.
 * It includes details such as the open and close prices, profit, and timestamps.
 *
 * # Examples
 *
 * ## Python
 * ```python
 * from binaryoptionstoolsuni import Deal
 *
 * # This is an example of how you might receive a Deal object
 * # from the API after a trade is completed.
 * # You would not typically construct this yourself.
 * deal = ... # receive from api.result()
 * print(f"Trade {deal.id} on {deal.asset} resulted in a profit of {deal.profit}")
 * ```
 */
public struct Deal {
    public var id: String
    public var openTime: String
    public var closeTime: String
    public var openTimestamp: Int64
    public var closeTimestamp: Int64
    public var uid: UInt64
    public var requestId: String?
    public var amount: Double
    public var profit: Double
    public var percentProfit: Int32
    public var percentLoss: Int32
    public var openPrice: Double
    public var closePrice: Double
    public var command: Int32
    public var asset: String
    public var isDemo: UInt32
    public var copyTicket: String
    public var openMs: Int32
    public var closeMs: Int32?
    public var optionType: Int32
    public var isRollover: Bool?
    public var isCopySignal: Bool?
    public var isAi: Bool?
    public var currency: String
    public var amountUsd: Double?
    public var amountUsd2: Double?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, openTime: String, closeTime: String, openTimestamp: Int64, closeTimestamp: Int64, uid: UInt64, requestId: String?, amount: Double, profit: Double, percentProfit: Int32, percentLoss: Int32, openPrice: Double, closePrice: Double, command: Int32, asset: String, isDemo: UInt32, copyTicket: String, openMs: Int32, closeMs: Int32?, optionType: Int32, isRollover: Bool?, isCopySignal: Bool?, isAi: Bool?, currency: String, amountUsd: Double?, amountUsd2: Double?) {
        self.id = id
        self.openTime = openTime
        self.closeTime = closeTime
        self.openTimestamp = openTimestamp
        self.closeTimestamp = closeTimestamp
        self.uid = uid
        self.requestId = requestId
        self.amount = amount
        self.profit = profit
        self.percentProfit = percentProfit
        self.percentLoss = percentLoss
        self.openPrice = openPrice
        self.closePrice = closePrice
        self.command = command
        self.asset = asset
        self.isDemo = isDemo
        self.copyTicket = copyTicket
        self.openMs = openMs
        self.closeMs = closeMs
        self.optionType = optionType
        self.isRollover = isRollover
        self.isCopySignal = isCopySignal
        self.isAi = isAi
        self.currency = currency
        self.amountUsd = amountUsd
        self.amountUsd2 = amountUsd2
    }
}

#if compiler(>=6)
extension Deal: Sendable {}
#endif


extension Deal: Equatable, Hashable {
    public static func ==(lhs: Deal, rhs: Deal) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.openTime != rhs.openTime {
            return false
        }
        if lhs.closeTime != rhs.closeTime {
            return false
        }
        if lhs.openTimestamp != rhs.openTimestamp {
            return false
        }
        if lhs.closeTimestamp != rhs.closeTimestamp {
            return false
        }
        if lhs.uid != rhs.uid {
            return false
        }
        if lhs.requestId != rhs.requestId {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        if lhs.profit != rhs.profit {
            return false
        }
        if lhs.percentProfit != rhs.percentProfit {
            return false
        }
        if lhs.percentLoss != rhs.percentLoss {
            return false
        }
        if lhs.openPrice != rhs.openPrice {
            return false
        }
        if lhs.closePrice != rhs.closePrice {
            return false
        }
        if lhs.command != rhs.command {
            return false
        }
        if lhs.asset != rhs.asset {
            return false
        }
        if lhs.isDemo != rhs.isDemo {
            return false
        }
        if lhs.copyTicket != rhs.copyTicket {
            return false
        }
        if lhs.openMs != rhs.openMs {
            return false
        }
        if lhs.closeMs != rhs.closeMs {
            return false
        }
        if lhs.optionType != rhs.optionType {
            return false
        }
        if lhs.isRollover != rhs.isRollover {
            return false
        }
        if lhs.isCopySignal != rhs.isCopySignal {
            return false
        }
        if lhs.isAi != rhs.isAi {
            return false
        }
        if lhs.currency != rhs.currency {
            return false
        }
        if lhs.amountUsd != rhs.amountUsd {
            return false
        }
        if lhs.amountUsd2 != rhs.amountUsd2 {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(openTime)
        hasher.combine(closeTime)
        hasher.combine(openTimestamp)
        hasher.combine(closeTimestamp)
        hasher.combine(uid)
        hasher.combine(requestId)
        hasher.combine(amount)
        hasher.combine(profit)
        hasher.combine(percentProfit)
        hasher.combine(percentLoss)
        hasher.combine(openPrice)
        hasher.combine(closePrice)
        hasher.combine(command)
        hasher.combine(asset)
        hasher.combine(isDemo)
        hasher.combine(copyTicket)
        hasher.combine(openMs)
        hasher.combine(closeMs)
        hasher.combine(optionType)
        hasher.combine(isRollover)
        hasher.combine(isCopySignal)
        hasher.combine(isAi)
        hasher.combine(currency)
        hasher.combine(amountUsd)
        hasher.combine(amountUsd2)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDeal: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Deal {
        return
            try Deal(
                id: FfiConverterString.read(from: &buf), 
                openTime: FfiConverterString.read(from: &buf), 
                closeTime: FfiConverterString.read(from: &buf), 
                openTimestamp: FfiConverterInt64.read(from: &buf), 
                closeTimestamp: FfiConverterInt64.read(from: &buf), 
                uid: FfiConverterUInt64.read(from: &buf), 
                requestId: FfiConverterOptionString.read(from: &buf), 
                amount: FfiConverterDouble.read(from: &buf), 
                profit: FfiConverterDouble.read(from: &buf), 
                percentProfit: FfiConverterInt32.read(from: &buf), 
                percentLoss: FfiConverterInt32.read(from: &buf), 
                openPrice: FfiConverterDouble.read(from: &buf), 
                closePrice: FfiConverterDouble.read(from: &buf), 
                command: FfiConverterInt32.read(from: &buf), 
                asset: FfiConverterString.read(from: &buf), 
                isDemo: FfiConverterUInt32.read(from: &buf), 
                copyTicket: FfiConverterString.read(from: &buf), 
                openMs: FfiConverterInt32.read(from: &buf), 
                closeMs: FfiConverterOptionInt32.read(from: &buf), 
                optionType: FfiConverterInt32.read(from: &buf), 
                isRollover: FfiConverterOptionBool.read(from: &buf), 
                isCopySignal: FfiConverterOptionBool.read(from: &buf), 
                isAi: FfiConverterOptionBool.read(from: &buf), 
                currency: FfiConverterString.read(from: &buf), 
                amountUsd: FfiConverterOptionDouble.read(from: &buf), 
                amountUsd2: FfiConverterOptionDouble.read(from: &buf)
        )
    }

    public static func write(_ value: Deal, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterString.write(value.openTime, into: &buf)
        FfiConverterString.write(value.closeTime, into: &buf)
        FfiConverterInt64.write(value.openTimestamp, into: &buf)
        FfiConverterInt64.write(value.closeTimestamp, into: &buf)
        FfiConverterUInt64.write(value.uid, into: &buf)
        FfiConverterOptionString.write(value.requestId, into: &buf)
        FfiConverterDouble.write(value.amount, into: &buf)
        FfiConverterDouble.write(value.profit, into: &buf)
        FfiConverterInt32.write(value.percentProfit, into: &buf)
        FfiConverterInt32.write(value.percentLoss, into: &buf)
        FfiConverterDouble.write(value.openPrice, into: &buf)
        FfiConverterDouble.write(value.closePrice, into: &buf)
        FfiConverterInt32.write(value.command, into: &buf)
        FfiConverterString.write(value.asset, into: &buf)
        FfiConverterUInt32.write(value.isDemo, into: &buf)
        FfiConverterString.write(value.copyTicket, into: &buf)
        FfiConverterInt32.write(value.openMs, into: &buf)
        FfiConverterOptionInt32.write(value.closeMs, into: &buf)
        FfiConverterInt32.write(value.optionType, into: &buf)
        FfiConverterOptionBool.write(value.isRollover, into: &buf)
        FfiConverterOptionBool.write(value.isCopySignal, into: &buf)
        FfiConverterOptionBool.write(value.isAi, into: &buf)
        FfiConverterString.write(value.currency, into: &buf)
        FfiConverterOptionDouble.write(value.amountUsd, into: &buf)
        FfiConverterOptionDouble.write(value.amountUsd2, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDeal_lift(_ buf: RustBuffer) throws -> Deal {
    return try FfiConverterTypeDeal.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDeal_lower(_ value: Deal) -> RustBuffer {
    return FfiConverterTypeDeal.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Represents the action to take in a trade.
 *
 * This enum is used to specify whether a trade is a "Call" (buy) or a "Put" (sell).
 * It's a fundamental concept in binary options trading.
 *
 * # Examples
 *
 * ## Python
 * ```python
 * from binaryoptionstoolsuni import Action
 *
 * buy_action = Action.CALL
 * sell_action = Action.PUT
 * ```
 *
 * ## Swift
 * ```swift
 * import binaryoptionstoolsuni
 *
 * let buyAction = Action.call
 * let sellAction = Action.put
 * ```
 *
 * ## Kotlin
 * ```kotlin
 * import uniffi.binaryoptionstoolsuni.Action
 *
 * val buyAction = Action.CALL
 * val sellAction = Action.PUT
 * ```
 *
 * ## C#
 * ```csharp
 * using UniFFI.BinaryOptionsToolsUni;
 *
 * var buyAction = Action.Call;
 * var sellAction = Action.Put;
 * ```
 *
 * ## Go
 * ```go
 * import "github.com/your-repo/binaryoptionstoolsuni"
 *
 * var buyAction = binaryoptionstoolsuni.ActionCall
 * var sellAction = binaryoptionstoolsuni.ActionPut
 * ```
 */

public enum Action {
    
    case call
    case put
}


#if compiler(>=6)
extension Action: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAction: FfiConverterRustBuffer {
    typealias SwiftType = Action

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Action {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .call
        
        case 2: return .put
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Action, into buf: inout [UInt8]) {
        switch value {
        
        
        case .call:
            writeInt(&buf, Int32(1))
        
        
        case .put:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAction_lift(_ buf: RustBuffer) throws -> Action {
    return try FfiConverterTypeAction.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAction_lower(_ value: Action) -> RustBuffer {
    return FfiConverterTypeAction.lower(value)
}


extension Action: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Represents the type of an asset.
 *
 * This enum is used to categorize assets into different types, such as stocks, currencies, etc.
 * This information can be useful for filtering and organizing assets.
 *
 * # Examples
 *
 * ## Python
 * ```python
 * from binaryoptionstoolsuni import AssetType
 *
 * asset_type = AssetType.CURRENCY
 * ```
 */

public enum AssetType {
    
    case stock
    case currency
    case commodity
    case cryptocurrency
    case index
}


#if compiler(>=6)
extension AssetType: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAssetType: FfiConverterRustBuffer {
    typealias SwiftType = AssetType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AssetType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .stock
        
        case 2: return .currency
        
        case 3: return .commodity
        
        case 4: return .cryptocurrency
        
        case 5: return .index
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AssetType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .stock:
            writeInt(&buf, Int32(1))
        
        
        case .currency:
            writeInt(&buf, Int32(2))
        
        
        case .commodity:
            writeInt(&buf, Int32(3))
        
        
        case .cryptocurrency:
            writeInt(&buf, Int32(4))
        
        
        case .index:
            writeInt(&buf, Int32(5))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAssetType_lift(_ buf: RustBuffer) throws -> AssetType {
    return try FfiConverterTypeAssetType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAssetType_lower(_ value: AssetType) -> RustBuffer {
    return FfiConverterTypeAssetType.lower(value)
}


extension AssetType: Equatable, Hashable {}







public enum UniError: Swift.Error {

    
    
    case BinaryOptions(String
    )
    case PocketOption(String
    )
    case Uuid(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUniError: FfiConverterRustBuffer {
    typealias SwiftType = UniError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UniError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .BinaryOptions(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .PocketOption(
            try FfiConverterString.read(from: &buf)
            )
        case 3: return .Uuid(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: UniError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .BinaryOptions(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .PocketOption(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Uuid(v1):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUniError_lift(_ buf: RustBuffer) throws -> UniError {
    return try FfiConverterTypeUniError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUniError_lower(_ value: UniError) -> RustBuffer {
    return FfiConverterTypeUniError.lower(value)
}


extension UniError: Equatable, Hashable {}




extension UniError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionInt32: FfiConverterRustBuffer {
    typealias SwiftType = Int32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionDouble: FfiConverterRustBuffer {
    typealias SwiftType = Double?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDouble.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDouble.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionBool: FfiConverterRustBuffer {
    typealias SwiftType = Bool?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterBool.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterBool.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceTypeAsset: FfiConverterRustBuffer {
    typealias SwiftType = [Asset]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeAsset.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeAsset.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeAsset: FfiConverterRustBuffer {
    typealias SwiftType = [Asset]

    public static func write(_ value: [Asset], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAsset.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Asset] {
        let len: Int32 = try readInt(&buf)
        var seq = [Asset]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeAsset.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeCandle: FfiConverterRustBuffer {
    typealias SwiftType = [Candle]

    public static func write(_ value: [Candle], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeCandle.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Candle] {
        let len: Int32 = try readInt(&buf)
        var seq = [Candle]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeCandle.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeCandleLength: FfiConverterRustBuffer {
    typealias SwiftType = [CandleLength]

    public static func write(_ value: [CandleLength], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeCandleLength.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [CandleLength] {
        let len: Int32 = try readInt(&buf)
        var seq = [CandleLength]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeCandleLength.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeDeal: FfiConverterRustBuffer {
    typealias SwiftType = [Deal]

    public static func write(_ value: [Deal], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeDeal.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Deal] {
        let len: Int32 = try readInt(&buf)
        var seq = [Deal]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeDeal.read(from: &buf))
        }
        return seq
    }
}
private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

fileprivate let uniffiContinuationHandleMap = UniffiHandleMap<UnsafeContinuation<Int8, Never>>()

fileprivate func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UInt64,
    pollFunc: (UInt64, @escaping UniffiRustFutureContinuationCallback, UInt64) -> (),
    completeFunc: (UInt64, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UInt64) -> (),
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Swift.Error)?
) async throws -> T {
    // Make sure to call the ensure init function since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureBinaryOptionsToolsUniInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8;
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(
                rustFuture,
                uniffiFutureContinuationCallback,
                uniffiContinuationHandleMap.insert(obj: $0)
            )
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
fileprivate func uniffiFutureContinuationCallback(handle: UInt64, pollResult: Int8) {
    if let continuation = try? uniffiContinuationHandleMap.remove(handle: handle) {
        continuation.resume(returning: pollResult)
    } else {
        print("uniffiFutureContinuationCallback invalid handle")
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_binary_options_tools_uni_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_binary_options_tools_uni_checksum_method_pocketoption_assets() != 48493) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_binary_options_tools_uni_checksum_method_pocketoption_balance() != 26020) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_binary_options_tools_uni_checksum_method_pocketoption_buy() != 63032) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_binary_options_tools_uni_checksum_method_pocketoption_clear_closed_deals() != 9178) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_binary_options_tools_uni_checksum_method_pocketoption_get_candles() != 23490) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_binary_options_tools_uni_checksum_method_pocketoption_get_candles_advanced() != 27509) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_binary_options_tools_uni_checksum_method_pocketoption_get_closed_deals() != 47785) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_binary_options_tools_uni_checksum_method_pocketoption_get_opened_deals() != 27985) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_binary_options_tools_uni_checksum_method_pocketoption_history() != 27093) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_binary_options_tools_uni_checksum_method_pocketoption_is_demo() != 19411) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_binary_options_tools_uni_checksum_method_pocketoption_reconnect() != 9220) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_binary_options_tools_uni_checksum_method_pocketoption_result() != 594) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_binary_options_tools_uni_checksum_method_pocketoption_result_with_timeout() != 56468) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_binary_options_tools_uni_checksum_method_pocketoption_sell() != 61157) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_binary_options_tools_uni_checksum_method_pocketoption_server_time() != 10589) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_binary_options_tools_uni_checksum_method_pocketoption_shutdown() != 51452) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_binary_options_tools_uni_checksum_method_pocketoption_subscribe() != 23382) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_binary_options_tools_uni_checksum_method_pocketoption_trade() != 14619) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_binary_options_tools_uni_checksum_method_pocketoption_unsubscribe() != 29837) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_binary_options_tools_uni_checksum_method_subscriptionstream_next() != 13448) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_binary_options_tools_uni_checksum_constructor_pocketoption_init() != 50054) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_binary_options_tools_uni_checksum_constructor_pocketoption_new() != 31315) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_binary_options_tools_uni_checksum_constructor_pocketoption_new_with_url() != 40992) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureBinaryOptionsToolsUniInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all