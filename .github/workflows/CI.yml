# This file is autogenerated by maturin v1.7.0
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - main
      - master
  #   tags:
  #     - '*'
  workflow_dispatch:

# permissions:
#   contents: read

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          - runner: ubuntu-latest
            target: aarch64
          - runner: ubuntu-22.04
            target: armv7
          - runner: ubuntu-latest
            target: s390x
          - runner: ubuntu-latest
            target: ppc64le
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      # ðŸ›  Install ARM toolchain and OpenSSL for armv7
      - name: Setup cross-compilation for armv7
        if: matrix.platform.target == 'armv7'
        run: |
          sudo dpkg --add-architecture armhf
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf libssl-dev:armhf pkg-config

          echo "OPENSSL_DIR=/usr/arm-linux-gnueabihf" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/arm-linux-gnueabihf/pkgconfig" >> $GITHUB_ENV
          echo "CC_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV

        # ðŸ›  Enable vendored OpenSSL for all platforms as fallback
      - name: Set OPENSSL vendored fallback
        run: |
          echo "OPENSSL_NO_VENDOR=0" >> $GITHUB_ENV
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
      - name: Build wheels
        uses: PyO3/maturin-action@v1

        with:
          working-directory: BinaryOptionsToolsV2 # Confirm this path is correct
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: BinaryOptionsToolsV2/dist

  musllinux:
    runs-on: ${{ matrix.platform.runner }}
    defaults:
      run:
        working-directory: BinaryOptionsToolsV2

    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          - runner: ubuntu-latest
            target: aarch64
          - runner: ubuntu-latest
            target: armv7
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: BinaryOptionsToolsV2 # Confirm this path is correct

          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: musllinux_1_2
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}
          path: BinaryOptionsToolsV2/dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    defaults:
      run:
        working-directory: BinaryOptionsToolsV2

    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: BinaryOptionsToolsV2 # Confirm this path is correct
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: BinaryOptionsToolsV2/dist
      - name: Publish
        if: env.PYPI_API_TOKEN != ''
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run:
          maturin publish -u __token__ -p $PYPI_API_TOKEN

  macos:
    runs-on: ${{ matrix.platform.runner }}
    defaults:
      run:
        working-directory: BinaryOptionsToolsV2

    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: BinaryOptionsToolsV2 # Confirm this path is correct
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: BinaryOptionsToolsV2/dist
      - name: Publish
        if: env.PYPI_API_TOKEN != ''
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run:
          maturin publish -u __token__ -p $PYPI_API_TOKEN

  sdist:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: BinaryOptionsToolsV2
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          working-directory: BinaryOptionsToolsV2 # Confirm this path is correct
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: BinaryOptionsToolsV2/dist

  release:
    name: Release
    runs-on: windows-latest
    defaults:
      run:
        working-directory: BinaryOptionsToolsV2

    needs: [macos, windows] # [macos, windows, linux, musllinux]
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: BinaryOptionsToolsV2/dist
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Publish to PyPi
        if: env.PYPI_API_TOKEN != ''
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ env.PYPI_API_TOKEN }}
        run: 
          uv pip install --upgrade twine
          twine upload --skip-existing *